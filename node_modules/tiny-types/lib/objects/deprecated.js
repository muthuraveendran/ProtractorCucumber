"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.deprecated = void 0;
/**
 * @desc A decorator to mark a class, method or function as deprecated and make it log a warning whenever it is used.
 * Please see the tests for examples of usage.
 *
 * @param {string} message - describes the alternative implementation that should be used instead
 *                  of the deprecated method/function/class
 * @param {Logger} log - a function that handles the printing of the message,
 *                  such as {@link console.warn}
 */
function deprecated(message, log) {
    if (message === void 0) { message = ''; }
    if (log === void 0) { log = console.warn; }
    var hasPrototype = function (target) { return target.hasOwnProperty('prototype'); };
    return function (target, propertyKey, descriptor) {
        if (target && propertyKey && descriptor) {
            return deprecateMethod(message, target, propertyKey, descriptor, log);
        }
        else if (hasPrototype(target)) {
            return deprecateClass(message, target, log);
        }
        else {
            throw new Error("Only a class, method or function can be marked as deprecated. " + typeof target + " given.");
        }
    };
}
exports.deprecated = deprecated;
function deprecateClass(message, target, log) {
    return /** @class */ (function (_super) {
        __extends(class_1, _super);
        function class_1() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var _this = this;
            log((target.name + " has been deprecated. " + message).trim());
            _this = _super.apply(this, args) || this;
            return _this;
        }
        return class_1;
    }(target));
}
function deprecateMethod(message, target, propertyKey, descriptor, log) {
    var originalMethod = descriptor.value;
    descriptor.value = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        log((target.constructor.name + "#" + propertyKey + " has been deprecated. " + message).trim());
        return originalMethod.apply(this, args);
    };
    return descriptor;
}
//# sourceMappingURL=deprecated.js.map