"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Log = void 0;
const inspected_1 = require("../../io/inspected");
const model_1 = require("../../model");
const artifacts_1 = require("../../model/artifacts");
const Interaction_1 = require("../Interaction");
/**
 * @desc
 *  Enables the {@link Actor} to log arbitrary static values and answers to {@link Question}s,
 *  so that they can be printed to the terminal by the [`ConsoleReporter`](/modules/console-reporter/)
 *  and attached to the HTML report by the [`SerenityBDDReporter`](/modules/serenity-bdd/).
 *
 * @example
 *  import { Log } from '@serenity-js/core';
 *  import { Website } from '@serenity-js/protractor';
 *
 *  actor.attemptsTo(
 *      Log.the('Current page', Website.title(), Website.url()),
 *  );
 *
 * @extends {Interaction}
 */
class Log extends Interaction_1.Interaction {
    /**
     * @param {...items: any[]} items
     *  The items to be logged
     */
    constructor(items) {
        super();
        this.items = items;
    }
    /**
     * @desc
     *  Instantiates a new {@link Log} {@link Interaction}.
     *
     * @param {...items: any[]} items
     *  The items to be logged
     * @returns {Interaction}
     */
    static the(...items) {
        return new Log(items);
    }
    /**
     * @desc
     *  Makes the provided {@link Actor}
     *  perform this {@link Interaction}.
     *
     * @param {UsesAbilities & AnswersQuestions & CollectsArtifacts} actor
     * @returns {Promise<void>}
     *
     * @see {@link Actor}
     * @see {@link UsesAbilities}
     * @see {@link AnswersQuestions}
     * @see {@link CollectsArtifacts}
     */
    performAs(actor) {
        return Promise
            .all(this.items.map(item => actor.answer(item)))
            .then(items => items.forEach((item, i) => actor.collect(artifacts_1.LogEntry.fromJSON({ data: inspected_1.inspected(item) }), new model_1.Name(inspected_1.inspected(this.items[i])))));
    }
    /**
     * @desc
     *  Generates a description to be used when reporting this {@link Activity}.
     *
     * @returns {string}
     */
    toString() {
        return `#actor logs: ${this.items.join(', ')}`;
    }
}
exports.Log = Log;
//# sourceMappingURL=Log.js.map