"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createQuestionProxy = void 0;
/* eslint-disable @typescript-eslint/ban-types */
const io_1 = require("../../../io");
const Question_1 = require("../../Question");
const describePath_1 = require("./describePath");
const key_1 = require("./key");
/**
 * @package
 */
function createQuestionProxy(subject, path = []) {
    const empty = {};
    return new Proxy(empty, {
        get(target, name) {
            if (key_1.key(name).isOneOf('answeredBy', 'describedAs', 'map', 'toString')) {
                const question = Question_1.Question.about(io_1.formatted `property ${describePath_1.describePath(path)} of ${subject}`, actor => {
                    return actor.answer(subject).then(answer => {
                        return path.reduce((subObject, keyName, index) => {
                            if (keyName in subObject) {
                                return subObject[keyName];
                            }
                            throw new Error(io_1.formatted `property ${describePath_1.describePath(path.slice(0, index + 1))} of ${subject} doesn't exist`);
                        }, answer);
                    });
                });
                return question[name].bind(question);
            }
            return createQuestionProxy(subject, path.concat(name));
        }
    });
}
exports.createQuestionProxy = createQuestionProxy;
//# sourceMappingURL=createQuestionProxy.js.map