"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Check = void 0;
const io_1 = require("../../io");
const Task_1 = require("../Task");
const expectations_1 = require("./expectations");
/**
 * @desc
 *  A control flow statement that enables the {@link @serenity-js/core/lib/screenplay/actor~Actor}
 *  either to choose whether or not to perform a series of activities,
 *  or to choose which of the two provided series of activities to perform.
 *
 * @example <caption>Choose from two alternatives</caption>
 *  import { equals } from '@serenity-js/assertions';
 *  import { Check } from '@serenity-js/core';
 *
 *  actor.attemptsTo(
 *      Check.whether(process.env.MODE, equals('prod'))
 *          .andIfSo(
 *              LogInAsProdUser(),
 *          )
 *          .otherwise(
 *              LogInAsTestUser(),
 *          )
 *  );
 *
 * @example <caption>Choose whether or not to perform an activity</caption>
 *  import { equals } from '@serenity-js/assertions';
 *  import { Check } from '@serenity-js/core';
 *  import { isDisplayed } from '@serenity-js/protractor';
 *
 *  actor.attemptsTo(
 *      Check.whether(NewsletterModal(), isDisplayed())
 *          .andIfSo(
 *              DismissModal(),
 *          )
 *  );
 *
 * @extends {@serenity-js/core/lib/screenplay~Task}
 *
 * @see https://en.wikipedia.org/wiki/Control_flow
 */
class Check extends Task_1.Task {
    /**
     *
     * @param actual
     * @param expectation
     * @param activities
     * @param alternativeActivities
     */
    constructor(actual, expectation, activities, alternativeActivities = []) {
        super();
        this.actual = actual;
        this.expectation = expectation;
        this.activities = activities;
        this.alternativeActivities = alternativeActivities;
    }
    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types
    static whether(actual, expectation) {
        return {
            andIfSo: (...activities) => new Check(actual, expectation, activities),
        };
    }
    /**
     * @param {...@serenity-js/core/lib/screenplay~Activity[]} alternativeActivities
     * @return {@serenity-js/core/lib/screenplay~Task}
     */
    otherwise(...alternativeActivities) {
        return new Check(this.actual, this.expectation, this.activities, alternativeActivities);
    }
    /**
     * @desc
     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}
     *  perform this {@link @serenity-js/core/lib/screenplay~Task}.
     *
     * @param {AnswersQuestions & PerformsActivities} actor
     * @returns {Promise<void>}
     *
     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}
     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}
     * @see {@link @serenity-js/core/lib/screenplay/actor~PerformsActivities}
     */
    performAs(actor) {
        return Promise.all([
            actor.answer(this.actual),
            actor.answer(this.expectation),
        ]).then(([actual, expectation]) => expectation(actual).then(outcome => outcome instanceof expectations_1.ExpectationMet
            ? actor.attemptsTo(...this.activities)
            : actor.attemptsTo(...this.alternativeActivities)));
    }
    /**
     * @desc
     *  Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.
     *
     * @returns {string}
     */
    toString() {
        return io_1.formatted `#actor checks whether ${this.actual} does ${this.expectation}`;
    }
}
exports.Check = Check;
//# sourceMappingURL=Check.js.map