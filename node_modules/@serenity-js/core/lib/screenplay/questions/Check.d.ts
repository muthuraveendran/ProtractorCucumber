import { Activity } from '../Activity';
import { AnswersQuestions, PerformsActivities } from '../actor';
import { Answerable } from '../Answerable';
import { Task } from '../Task';
import { Expectation } from './Expectation';
/**
 * @desc
 *  A control flow statement that enables the {@link @serenity-js/core/lib/screenplay/actor~Actor}
 *  either to choose whether or not to perform a series of activities,
 *  or to choose which of the two provided series of activities to perform.
 *
 * @example <caption>Choose from two alternatives</caption>
 *  import { equals } from '@serenity-js/assertions';
 *  import { Check } from '@serenity-js/core';
 *
 *  actor.attemptsTo(
 *      Check.whether(process.env.MODE, equals('prod'))
 *          .andIfSo(
 *              LogInAsProdUser(),
 *          )
 *          .otherwise(
 *              LogInAsTestUser(),
 *          )
 *  );
 *
 * @example <caption>Choose whether or not to perform an activity</caption>
 *  import { equals } from '@serenity-js/assertions';
 *  import { Check } from '@serenity-js/core';
 *  import { isDisplayed } from '@serenity-js/protractor';
 *
 *  actor.attemptsTo(
 *      Check.whether(NewsletterModal(), isDisplayed())
 *          .andIfSo(
 *              DismissModal(),
 *          )
 *  );
 *
 * @extends {@serenity-js/core/lib/screenplay~Task}
 *
 * @see https://en.wikipedia.org/wiki/Control_flow
 */
export declare class Check<Actual> extends Task {
    private readonly actual;
    private readonly expectation;
    private readonly activities;
    private readonly alternativeActivities;
    static whether<A>(actual: Answerable<A>, expectation: Expectation<any, A>): {
        andIfSo: (...activities: Activity[]) => Check<A>;
    };
    /**
     *
     * @param actual
     * @param expectation
     * @param activities
     * @param alternativeActivities
     */
    constructor(actual: Answerable<Actual>, expectation: Expectation<any, Actual>, activities: Activity[], alternativeActivities?: Activity[]);
    /**
     * @param {...@serenity-js/core/lib/screenplay~Activity[]} alternativeActivities
     * @return {@serenity-js/core/lib/screenplay~Task}
     */
    otherwise(...alternativeActivities: Activity[]): Task;
    /**
     * @desc
     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}
     *  perform this {@link @serenity-js/core/lib/screenplay~Task}.
     *
     * @param {AnswersQuestions & PerformsActivities} actor
     * @returns {Promise<void>}
     *
     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}
     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}
     * @see {@link @serenity-js/core/lib/screenplay/actor~PerformsActivities}
     */
    performAs(actor: AnswersQuestions & PerformsActivities): PromiseLike<void>;
    /**
     * @desc
     *  Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.
     *
     * @returns {string}
     */
    toString(): string;
}
