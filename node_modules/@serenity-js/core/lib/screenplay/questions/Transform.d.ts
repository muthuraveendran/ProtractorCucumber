import { AnswersQuestions, UsesAbilities } from '../actor';
import { Answerable } from '../Answerable';
import { Question } from '../Question';
/**
 * @experimental
 */
export declare class Transform<Answer_Type extends any, Output_Type> extends Question<Promise<Output_Type>> {
    private readonly questions;
    private readonly transformation;
    private readonly description;
    static the<AT extends any, OT>(questions: Answerable<AT> | Array<Answerable<AT>>, transformation: (...answers: AT[]) => OT): Transform<AT, OT>;
    constructor(questions: Array<Answerable<Answer_Type>>, transformation: (...answers: Answer_Type[]) => Output_Type, description?: string);
    /**
     * @deprecated
     *  Please use {@link Transform#describedAs} instead
     *
     * @desc
     *  Overrides the default {@link Transform#toString} representation of this object.
     *
     * @param {string} description
     * @returns {Transform<Answer_Type, Output_Type>}
     */
    as(description: string): Transform<Answer_Type, Output_Type>;
    /**
     * Changes the description of this question's subject.
     *
     * @param subject
     */
    describedAs(subject: string): this;
    answeredBy(actor: AnswersQuestions & UsesAbilities): Promise<Output_Type>;
}
