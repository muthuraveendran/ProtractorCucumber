"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Expectation = void 0;
const io_1 = require("../../io");
const __1 = require("../");
const expectations_1 = require("./expectations");
/**
 * @desc
 *  Defines an expectation to be used with [assertions](/modules/assertions)
 *  and {@link Question}s like {@link List}.
 *
 * @extends {Question}
 */
class Expectation extends __1.Question {
    /**
     * @desc
     *  Used to define a simple {@link Expectation}
     *
     * @example
     *  import { actorCalled, Expectation } from '@serenity-js/core';
     *  import { Ensure } from '@serenity-js/assertions';
     *
     *  function isDivisibleBy(expected: Answerable<number>): Expectation<number> {
     *      return Expectation.thatActualShould<number, number>('have value divisible by', expected)
     *          .soThat((actualValue, expectedValue) => actualValue % expectedValue === 0);
     *  }
     *
     *  actorCalled('Erica').attemptsTo(
     *      Ensure.that(4, isDivisibleBy(2)),
     *  );
     *
     * @param {string} relationshipName
     * @param {@serenity-js/core/lib/screenplay~Answerable<E>} expectedValue
     *
     * @returns {"soThat": function(predicate: Predicate<A,E>): Expectation<E, A>}
     */
    static thatActualShould(relationshipName, expectedValue) {
        return ({
            soThat: (predicate) => {
                return new DynamicallyGeneratedExpectation(relationshipName, predicate, expectedValue);
            },
        });
    }
    /**
     * @desc
     *  Used to compose {@link Expectation}s.
     *
     * @example
     *  import { actorCalled, Expectation } from '@serenity-js/core';
     *  import { Ensure, and, or, isGreaterThan, isLessThan, equals  } from '@serenity-js/assertions';
     *
     *  function isWithin(lowerBound: number, upperBound: number) {
     *      return Expectation
     *          .to(`have value within ${ lowerBound } and ${ upperBound }`)
     *          .soThatActual(and(
     *              or(isGreaterThan(lowerBound), equals(lowerBound)),
     *              or(isLessThan(upperBound), equals(upperBound)),
     *          ));
     *  }
     *
     *  actorCalled('Erica').attemptsTo(
     *      Ensure.that(5, isWithin(3, 6)),
     *  );
     *
     * @param {string} relationshipName
     *
     * @returns {"soThat": function(...expectations: Array<Expectation<any, A>>): Expectation<any, A>}
     */
    static to(relationshipName) {
        return {
            soThatActual: (expectation) => {
                return new ExpectationAlias(relationshipName, expectation);
            },
        };
    }
}
exports.Expectation = Expectation;
/**
 * @package
 */
class DynamicallyGeneratedExpectation extends Expectation {
    constructor(description, predicate, expectedValue) {
        super(`${description} ${io_1.formatted `${expectedValue}`}`);
        this.description = description;
        this.predicate = predicate;
        this.expectedValue = expectedValue;
    }
    answeredBy(actor) {
        return (actual) => actor.answer(this.expectedValue)
            .then(expected => {
            return this.predicate(actual, expected)
                ? new expectations_1.ExpectationMet(this.toString(), expected, actual)
                : new expectations_1.ExpectationNotMet(this.toString(), expected, actual);
        });
    }
}
/**
 * @package
 */
class ExpectationAlias extends Expectation {
    constructor(subject, expectation) {
        super(subject);
        this.expectation = expectation;
    }
    answeredBy(actor) {
        return (actual) => this.expectation.answeredBy(actor)(actual).then(_ => _ instanceof expectations_1.ExpectationMet
            ? new expectations_1.ExpectationMet(this.subject, _.expected, _.actual)
            : new expectations_1.ExpectationNotMet(_.message, _.expected, _.actual));
    }
}
//# sourceMappingURL=Expectation.js.map