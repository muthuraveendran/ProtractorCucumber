"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Artifact = void 0;
const tiny_types_1 = require("tiny-types");
const errors_1 = require("../errors");
const artifacts = require("./artifacts");
/**
 * @extends {tiny-types~TinyType}
 */
class Artifact extends tiny_types_1.TinyType {
    constructor(base64EncodedValue) {
        super();
        this.base64EncodedValue = base64EncodedValue;
        tiny_types_1.ensure(this.constructor.name, base64EncodedValue, tiny_types_1.isDefined(), tiny_types_1.isString(), looksLikeBase64Encoded());
    }
    static fromJSON(o) {
        const recognisedTypes = Object.keys(artifacts), type = Artifact.ofType(o.type);
        if (!type) {
            throw new errors_1.LogicError(`
                Couldn't de-serialise artifact of an unknown type.
                ${o.type} is not one of the recognised types: ${recognisedTypes.join(', ')}
           `);
        }
        return new type(o.base64EncodedValue);
    }
    static ofType(name) {
        const types = Object.keys(artifacts), type = types.find(constructorName => constructorName === name);
        return artifacts[type];
    }
    // todo: serialise on call
    toJSON() {
        return ({
            type: this.constructor.name,
            base64EncodedValue: this.base64EncodedValue,
        });
    }
}
exports.Artifact = Artifact;
function looksLikeBase64Encoded() {
    const regex = /^[\d+/=A-Za-z]+$/;
    return tiny_types_1.Predicate.to(`be base64-encoded`, (value) => regex.test(value));
}
//# sourceMappingURL=Artifact.js.map