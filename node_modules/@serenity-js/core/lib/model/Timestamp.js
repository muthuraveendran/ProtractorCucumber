"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Timestamp = void 0;
const moment = require("moment");
const tiny_types_1 = require("tiny-types");
const Duration_1 = require("./Duration");
class Timestamp extends tiny_types_1.TinyType {
    constructor(value = new Date()) {
        super();
        this.value = value;
        tiny_types_1.ensure(Timestamp.name, value, tiny_types_1.isDefined(), tiny_types_1.isInstanceOf(Date));
    }
    static fromJSON(v) {
        return new Timestamp(new Date(tiny_types_1.ensure(Timestamp.name, v, isSerialisedISO8601Date())));
    }
    static fromMillisecondTimestamp(v) {
        return new Timestamp(moment(v).toDate());
    }
    diff(another) {
        return new Duration_1.Duration(Math.abs(moment(this.value).diff(another.value, 'ms', true)));
    }
    plus(duration) {
        return new Timestamp(moment(this.value).add(duration.inMilliseconds(), 'ms').toDate());
    }
    less(duration) {
        return new Timestamp(moment(this.value).subtract(duration.inMilliseconds(), 'ms').toDate());
    }
    toMillisecondTimestamp() {
        return moment(this.value).valueOf();
    }
    toJSON() {
        return this.value.toJSON();
    }
    toString() {
        return this.value.toString();
    }
}
exports.Timestamp = Timestamp;
function isSerialisedISO8601Date() {
    return tiny_types_1.Predicate.to(`be an ISO-8601-compliant date`, (value) => moment(value, moment.ISO_8601, true).isValid());
}
//# sourceMappingURL=Timestamp.js.map