import { DomainEvent } from '../events';
import { CorrelationId, Timestamp } from '../model';
import { Actor } from '../screenplay/actor';
import { ListensToDomainEvents } from '../stage';
import { Cast } from './Cast';
import { StageManager } from './StageManager';
/**
 * @desc
 *  The place where {@link Actor}s perform.
 *
 *  In more technical terms, the Stage is the main event bus propagating {@link DomainEvent}s
 *  to {@link Actor}s it instantiates and {@link StageCrewMember}s that have been registered with it.
 *
 * @see {@link configure}
 * @see {@link engage}
 */
export declare class Stage {
    private cast;
    private readonly manager;
    /**
     * @desc
     *  Actors instantiated after the scene has started,
     *  who will be dismissed when the scene finishes.
     *
     * @private
     */
    private actorsOnFrontStage;
    /**
     * @desc
     *  Actors instantiated before the scene has started,
     *  who will be dismissed when the test run finishes.
     *
     * @private
     */
    private actorsOnBackstage;
    private actorsOnStage;
    /**
     * @desc
     *  The most recent actor referenced via the {@link actor} method
     *
     * @private
     */
    private actorInTheSpotlight;
    private currentActivity;
    private currentScene;
    /**
     * @param {Cast} cast
     * @param {StageManager} manager
     */
    constructor(cast: Cast, manager: StageManager);
    /**
     * @desc An alias for {@link Stage#actor}
     * @see {@link Stage#actor}
     * @alias {Stage#actor}
     * @param {string} name
     * @return {Actor}
     */
    theActorCalled(name: string): Actor;
    /**
     * @desc Instantiates a new {@link Actor} or fetches an existing one
     * by their name if they've already been instantiated.
     *
     * @param {string} name - case-sensitive name of the Actor
     * @return {Actor}
     */
    actor(name: string): Actor;
    /**
     * @desc
     *  Returns the last {@link Actor} instantiated via {@link Stage#actor}.
     *  Useful when you don't can't or choose not to reference the actor by their name.
     *
     * @throws {LogicError} if no {Actor} has been activated yet
     * @return {Actor}
     */
    theActorInTheSpotlight(): Actor;
    /**
     * @desc
     *  Returns {true} if there is an {@link Actor} in the spotlight, {false} otherwise.
     *
     * @return {boolean}
     */
    theShowHasStarted(): boolean;
    /**
     * @desc
     *  Configures the Stage to prepare {@link Actor}s
     *  instantiated via {@link Stage#actor} using the provided {@link Cast}.
     *
     * @param {Cast} actors
     * @returns {void}
     */
    engage(actors: Cast): void;
    /**
     * @desc
     *  Assigns listeners to be notified of {@link DomainEvent}s
     *  emitted via {@link Stage#announce}
     *
     * @param {ListensToDomainEvents[]} listeners
     * @returns {void}
     */
    assign(...listeners: ListensToDomainEvents[]): void;
    /**
     * @desc
     *  Notifies all the assigned listeners of the event.
     *
     * @listens {DomainEvent}
     *
     * @param {DomainEvent} event
     * @returns {void}
     */
    announce(event: DomainEvent): void;
    /**
     * @desc
     *  Returns current time. This method should be used whenever
     *  {@link DomainEvent} objects are instantiated by hand.
     *
     * @returns {Timestamp}
     */
    currentTime(): Timestamp;
    /**
     * @desc
     *  Generates and remembers a {@link CorrelationId}
     *  for the current scene.
     *
     *  This method should be used in custom test runner adapters
     *  when instantiating a {@link SceneStarts} event.
     *
     * @see {@link Stage#currentSceneId}
     *
     * @returns {CorrelationId}
     */
    assignNewSceneId(): CorrelationId;
    /**
     * @desc
     *  Returns the {@link CorrelationId} for the current scene.
     *
     * @see {@link Stage#assignNewSceneId}
     *
     * @returns {CorrelationId}
     */
    currentSceneId(): CorrelationId;
    /**
     * @desc
     *  Generates and remembers a {@link CorrelationId}
     *  for the current {@link Activity}.
     *
     *  This method should be used in custom test runner adapters
     *  when instantiating an {@link ActivityStarts} event.
     *
     * @see {@link Stage#currentActivityId}
     *
     * @returns {CorrelationId}
     */
    assignNewActivityId(): CorrelationId;
    /**
     * @desc
     *  Returns the {@link CorrelationId} for the current {@link Activity}.
     *
     * @see {@link Stage#assignNewSceneId}
     *
     * @returns {CorrelationId}
     */
    currentActivityId(): CorrelationId;
    /**
     * @desc
     *  Returns a Promise that will be resolved when any asynchronous
     *  post-processing activities performed by Serenity/JS are completed.
     *
     * @returns {Promise<void>}
     */
    waitForNextCue(): Promise<void>;
    private instantiatedActorCalled;
    private dismiss;
    /**
     * @private
     * @param {Cast} cast
     */
    private typeOf;
}
