import { DomainEvent } from '../../../events';
import { FileSystem } from '../../../io';
import { Stage } from '../../Stage';
import { StageCrewMember } from '../../StageCrewMember';
/**
 * @desc
 *  Stores any {@link Artifact}s emitted via {@link ArtifactGenerated} events on the {@link FileSystem}
 *
 * @example <caption>Registering ArtifactArchiver programmatically</caption>
 *  import { configure, StreamReporter } from '@serenity-js/core';
 *
 *  configure({
 *      crew: [
 *          ArtifactArchiver.storingArtifactsAt('./target/site/serenity'),
 *      ],
 *  });
 *
 * @example <caption>Registering ArtifactArchiver using Protractor configuration</caption>
 *  // protractor.conf.js
 *  const { ArtifactArchiver } = require('@serenity-js/core');
 *
 *  exports.config = {
 *    framework:     'custom',
 *    frameworkPath: require.resolve('@serenity-js/protractor/adapter'),
 *
 *    serenity: {
 *      crew: [
 *        ArtifactArchiver.storingArtifactsAt('./target/site/serenity'),
 *      ],
 *      // other Serenity/JS config
 *    },
 *
 *    // other Protractor config
 *  };
 *
 * @public
 * @implements {StageCrewMember}
 */
export declare class ArtifactArchiver implements StageCrewMember {
    private readonly fileSystem;
    private readonly stage?;
    /**
     * @desc
     *  Instantiates an `ArtifactArchiver` storing artifacts in a given `destination`.
     *  The `destination` directory will be created automatically and recursively if it doesn't exist.
     *
     * @param {string[]} destination
     *
     * @returns {StageCrewMember}
     */
    static storingArtifactsAt(...destination: string[]): StageCrewMember;
    /**
     * @param {FileSystem} fileSystem
     * @param {Stage} [stage]
     *  The stage this {@link StageCrewMember} should be assigned to
     */
    constructor(fileSystem: FileSystem, stage?: Stage);
    /**
     * @desc
     *  Creates a new instance of this {@link StageCrewMember} and assigns it to a given {@link Stage}.
     *
     * @see {@link StageCrewMember}
     *
     * @param {Stage} stage - An instance of a {@link Stage} this {@link StageCrewMember} will be assigned to
     * @returns {StageCrewMember} - A new instance of this {@link StageCrewMember}
     */
    assignedTo(stage: Stage): StageCrewMember;
    /**
     * @desc
     *  Handles {@link DomainEvent} objects emitted by the {@link StageManager}.
     *
     * @see {@link StageCrewMember}
     *
     * @listens {ArtifactGenerated}
     * @emits {ArtifactArchived}
     *
     * @param {DomainEvent} event
     * @returns {void}
     */
    notifyOf(event: DomainEvent): void;
    private fileNameFor;
    private archive;
    private archivisationAnnouncement;
}
