"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ArtifactArchiver = void 0;
const tiny_types_1 = require("tiny-types");
const events_1 = require("../../../events");
const io_1 = require("../../../io");
const model_1 = require("../../../model");
const Hash_1 = require("./Hash");
/**
 * @desc
 *  Stores any {@link Artifact}s emitted via {@link ArtifactGenerated} events on the {@link FileSystem}
 *
 * @example <caption>Registering ArtifactArchiver programmatically</caption>
 *  import { configure, StreamReporter } from '@serenity-js/core';
 *
 *  configure({
 *      crew: [
 *          ArtifactArchiver.storingArtifactsAt('./target/site/serenity'),
 *      ],
 *  });
 *
 * @example <caption>Registering ArtifactArchiver using Protractor configuration</caption>
 *  // protractor.conf.js
 *  const { ArtifactArchiver } = require('@serenity-js/core');
 *
 *  exports.config = {
 *    framework:     'custom',
 *    frameworkPath: require.resolve('@serenity-js/protractor/adapter'),
 *
 *    serenity: {
 *      crew: [
 *        ArtifactArchiver.storingArtifactsAt('./target/site/serenity'),
 *      ],
 *      // other Serenity/JS config
 *    },
 *
 *    // other Protractor config
 *  };
 *
 * @public
 * @implements {StageCrewMember}
 */
class ArtifactArchiver {
    /**
     * @param {FileSystem} fileSystem
     * @param {Stage} [stage]
     *  The stage this {@link StageCrewMember} should be assigned to
     */
    constructor(fileSystem, stage) {
        this.fileSystem = fileSystem;
        this.stage = stage;
    }
    /**
     * @desc
     *  Instantiates an `ArtifactArchiver` storing artifacts in a given `destination`.
     *  The `destination` directory will be created automatically and recursively if it doesn't exist.
     *
     * @param {string[]} destination
     *
     * @returns {StageCrewMember}
     */
    static storingArtifactsAt(...destination) {
        tiny_types_1.ensure('Path to destination directory', destination, tiny_types_1.property('length', tiny_types_1.isGreaterThan(0)));
        const pathToDestination = destination.map(segment => new io_1.Path(segment)).reduce((acc, current) => acc.join(current));
        return new ArtifactArchiver(new io_1.FileSystem(pathToDestination));
    }
    /**
     * @desc
     *  Creates a new instance of this {@link StageCrewMember} and assigns it to a given {@link Stage}.
     *
     * @see {@link StageCrewMember}
     *
     * @param {Stage} stage - An instance of a {@link Stage} this {@link StageCrewMember} will be assigned to
     * @returns {StageCrewMember} - A new instance of this {@link StageCrewMember}
     */
    assignedTo(stage) {
        return new ArtifactArchiver(this.fileSystem, stage);
    }
    /**
     * @desc
     *  Handles {@link DomainEvent} objects emitted by the {@link StageManager}.
     *
     * @see {@link StageCrewMember}
     *
     * @listens {ArtifactGenerated}
     * @emits {ArtifactArchived}
     *
     * @param {DomainEvent} event
     * @returns {void}
     */
    notifyOf(event) {
        if (!(event instanceof events_1.ArtifactGenerated)) {
            // ignore any other events
            return void 0;
        }
        if (event.artifact instanceof model_1.Photo) {
            const filename = this.fileNameFor('photo', event.name, event.artifact, 'png');
            this.archive(filename, event.artifact.base64EncodedValue, 'base64', this.archivisationAnnouncement(event, filename));
        }
        if (event.artifact instanceof model_1.TestReport) {
            const filename = this.fileNameFor('scenario', event.name, event.artifact, 'json');
            this.archive(filename, event.artifact.map(JSON.stringify), 'utf8', this.archivisationAnnouncement(event, filename));
        }
    }
    fileNameFor(prefix, artifactName, artifact, extension) {
        const hash = Hash_1.Hash.of(artifact.base64EncodedValue).short();
        return io_1.Path.fromSanitisedString(
        // Ensure that the file name is shorter than 250 chars, which is safe with all the filesystems
        // note: we can't do that in the Path constructor as the Path can be used to join other paths,
        // so restricting the length of the _path_ itself would not be correct.
        `${prefix.slice(0, 10)}-${urlFriendly(artifactName.value).slice(0, 64)}-${hash}.${extension}`.replace(/-+/g, '-'));
    }
    archive(relativePath, contents, encoding, announce) {
        const id = model_1.CorrelationId.create();
        this.stage.announce(new events_1.AsyncOperationAttempted(new model_1.Description(`[${this.constructor.name}] Saving '${relativePath.value}'...`), id));
        this.fileSystem.store(relativePath, contents, encoding)
            .then(absolutePath => {
            announce(relativePath);
            this.stage.announce(new events_1.AsyncOperationCompleted(new model_1.Description(`[${this.constructor.name}] Saved '${absolutePath.value}'`), id));
        })
            .catch(error => {
            this.stage.announce(new events_1.AsyncOperationFailed(error, id));
        });
    }
    archivisationAnnouncement(event, relativePathToArtifact) {
        return (absolutePath) => {
            if (event instanceof events_1.ActivityRelatedArtifactGenerated) {
                this.stage.announce(new events_1.ActivityRelatedArtifactArchived(event.sceneId, event.activityId, event.name, event.artifact.constructor, relativePathToArtifact));
            }
            else if (event instanceof events_1.ArtifactGenerated) {
                this.stage.announce(new events_1.ArtifactArchived(event.sceneId, event.name, event.artifact.constructor, relativePathToArtifact));
            }
        };
    }
}
exports.ArtifactArchiver = ArtifactArchiver;
/**
 * @private
 * @param {string} name
 */
function urlFriendly(name) {
    return name.toLocaleLowerCase()
        .replace(/[^\d.a-z-]/g, '-');
}
//# sourceMappingURL=ArtifactArchiver.js.map