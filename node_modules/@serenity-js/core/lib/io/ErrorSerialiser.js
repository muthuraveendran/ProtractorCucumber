"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ErrorSerialiser = void 0;
const serenitySpecificErrors = require("../errors");
const json_1 = require("./json");
class ErrorSerialiser {
    static serialise(error) {
        const serialisedError = Object.getOwnPropertyNames(error).reduce((serialised, key) => {
            serialised[key] = error[key];
            return serialised;
        }, { name: error.constructor.name || error.name });
        return json_1.stringify(serialisedError);
    }
    static deserialise(stringifiedError) {
        const serialisedError = json_1.parse(stringifiedError);
        // todo: de-serialise the cause map well
        const constructor = ErrorSerialiser.recognisedErrors.find(errorType => errorType.name === serialisedError.name) || Error;
        const deserialised = Object.create(constructor.prototype);
        for (const property in serialisedError) {
            if (Object.prototype.hasOwnProperty.call(serialisedError, property)) {
                deserialised[property] = serialisedError[property];
            }
        }
        return deserialised;
    }
    static deserialiseFromStackTrace(stack) {
        const lines = stack.split('\n');
        const pattern = /^([^\s:]*Error):\s(.*)$/;
        if (!pattern.test(lines[0])) {
            return new Error(stack);
        }
        const [, name, message] = lines[0].match(pattern);
        return ErrorSerialiser.deserialise(json_1.stringify({ name, message, stack }));
    }
}
exports.ErrorSerialiser = ErrorSerialiser;
ErrorSerialiser.recognisedErrors = [
    ...Object.keys(serenitySpecificErrors).map(key => serenitySpecificErrors[key]),
    Error,
    EvalError,
    RangeError,
    ReferenceError,
    SyntaxError,
    TypeError,
    URIError,
];
//# sourceMappingURL=ErrorSerialiser.js.map