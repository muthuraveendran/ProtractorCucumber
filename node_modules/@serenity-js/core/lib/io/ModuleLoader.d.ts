import { Version } from './Version';
/**
 * @desc
 *  Dynamically loads Node modules located relative to `cwd`.
 */
export declare class ModuleLoader {
    readonly cwd: string;
    /**
     * @param {string} cwd
     *  Current working directory, relative to which Node modules should be resolved.
     */
    constructor(cwd: string);
    /**
     * @desc
     *  Returns true if a given module is available to be required, false otherwise.
     *
     * @param {string} moduleId
     *  NPM module id, for example 'cucumber' or '@serenity-js/core'
     */
    hasAvailable(moduleId: string): boolean;
    /**
     * @desc
     *  Works like `require.resolve`, but relative to specified current working directory
     *
     * @param {string} moduleId
     *  NPM module id, for example `cucumber` or `@serenity-js/core`
     *
     * @returns {string}
     *  Path a given Node module
     */
    resolve(moduleId: string): string;
    /**
     * @desc
     *  Works like `require`, but relative to specified current working directory
     *
     * @param {string} moduleId
     *
     * @returns {any}
     */
    require(moduleId: string): any;
    /**
     * @desc
     *  Returns {@link Version} of module specified by `moduleId`, based on its `package.json`.
     *
     * @param {string} moduleId
     * @returns {Version}
     */
    versionOf(moduleId: string): Version;
}
