"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProtractorFrameworkAdapter = void 0;
const core_1 = require("@serenity-js/core");
const is_plain_object_1 = require("is-plain-object"); // fails when using default import
const protractor_1 = require("protractor");
const deepmerge = require("deepmerge");
const browser_detector_1 = require("./browser-detector");
const reporter_1 = require("./reporter");
const runner_1 = require("./runner");
/**
 * @private
 */
class ProtractorFrameworkAdapter {
    constructor(serenity, protractorRunner, detector) {
        this.serenity = serenity;
        this.protractorRunner = protractorRunner;
        this.detector = detector;
    }
    /**
     * @param {string[]} specs
     *  Paths to spec files
     *
     * @return {Promise<ProtractorReport>}
     */
    run(specs) {
        const runner = this.detector.runnerFor(this.protractorRunner.getConfig());
        const reporter = new reporter_1.ProtractorReporter(this.protractorRunner, runner.successThreshold());
        const config = deepmerge(this.defaultConfig(), this.protractorRunner.getConfig(), {
            isMergeableObject: is_plain_object_1.isPlainObject,
        });
        this.serenity.configure({
            cueTimeout: config.serenity.cueTimeout,
            actors: config.serenity.actors,
            crew: [
                browser_detector_1.BrowserDetector.with(browser_detector_1.StandardisedCapabilities.of(() => protractor_1.protractor.browser)),
                ...config.serenity.crew,
                reporter,
            ],
        });
        return Promise.resolve()
            .then(() => this.protractorRunner.runTestPreparer(runner_1.TestRunnerDetector.protractorCliOptions()))
            .then(() => runner.run(specs))
            .then(() => Promise.resolve((config.onComplete || noop)()))
            .then(() => reporter.report());
    }
    defaultConfig() {
        return {
            serenity: {
                crew: [
                    core_1.ArtifactArchiver.storingArtifactsAt(process.cwd(), 'target/site/serenity'),
                ],
            },
        };
    }
}
exports.ProtractorFrameworkAdapter = ProtractorFrameworkAdapter;
/** @private */
function noop() {
    // no-op
}
//# sourceMappingURL=ProtractorFrameworkAdapter.js.map