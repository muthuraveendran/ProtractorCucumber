"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestRunnerLoader = void 0;
/* eslint-disable unicorn/prevent-abbreviations,@typescript-eslint/ban-types */
const io_1 = require("@serenity-js/core/lib/io");
/**
 * @desc
 *  Loads a {@link @serenity-js/core/lib/io~TestRunnerAdapter}, needed to invoke
 *  the chosen test runner programmatically.
 *
 * @public
 */
class TestRunnerLoader {
    /**
     * @param {@serenity-js/core/lib/io~Path} cwd
     *  Current working directory; used to resolve glob paths to files for Cucumber.js to `require`,
     *  and instructing Serenity/JS where to look for this module's optional
     *  dependencies, like [`@serenity-js/cucumber`](/modules/cucumber),
     *  [`@serenity-js/mocha`](/modules/mocha),
     *  [`@serenity-js/jasmine`](/modules/jasmine), etc.
     *
     * @param {number | string} runnerId
     *  Unique identifier used to differentiate output files produced by native Cucumber.js formatters.
     *  For example, `process.pid`
     */
    constructor(cwd, runnerId) {
        this.runnerId = runnerId;
        this.moduleLoader = new io_1.ModuleLoader(cwd.value);
        this.fileSystem = new io_1.FileSystem(cwd);
        this.finder = new io_1.FileFinder(cwd);
    }
    /**
     * @param {@serenity-js/jasmine/lib/adapter~JasmineConfig} jasmineNodeOpts
     * @returns {@serenity-js/core/lib/io~TestRunnerAdapter}
     */
    forJasmine(jasmineNodeOpts /* JasmineConfig */) {
        const { JasmineAdapter } = this.moduleLoader.require('@serenity-js/jasmine/lib/adapter');
        return new JasmineAdapter(jasmineNodeOpts, this.moduleLoader);
    }
    /**
     * @param {@serenity-js/mocha/lib/adapter~MochaConfig} mochaOpts
     * @returns {@serenity-js/core/lib/io~TestRunnerAdapter}
     */
    forMocha(mochaOpts /* MochaConfig */) {
        const { MochaAdapter } = this.moduleLoader.require('@serenity-js/mocha/lib/adapter');
        return new MochaAdapter(mochaOpts, this.moduleLoader);
    }
    /**
     *
     * @param {@serenity-js/cucumber/lib/cli~CucumberConfig} cucumberOpts
     * @param {CucumberAdapterConfig} adapterConfig
     * @returns {@serenity-js/core/lib/io~TestRunnerAdapter}
     */
    forCucumber(cucumberOpts /* CucumberConfig */, adapterConfig) {
        const { CucumberCLIAdapter, CucumberFormat, StandardOutput, TempFileOutput } = this.moduleLoader.require('@serenity-js/cucumber/lib/cli');
        const config = new io_1.Config(cucumberOpts)
            .where('require', requires => this.finder.filesMatching(requires).map(p => p.value))
            .whereIf(adapterConfig.uniqueFormatterOutputs, 'format', values => [].concat(values).map(value => {
            const format = new CucumberFormat(value);
            if (format.output === '') {
                return format.value;
            }
            const basename = io_1.Path.from(format.output).basename();
            const filenameParts = basename.split('.');
            if (filenameParts[0] === basename) {
                return `${format.formatter}:${format.output}.${this.runnerId}`;
            }
            filenameParts.splice(-1, 0, `${this.runnerId}`);
            return `${format.formatter}:${format.output.replace(basename, filenameParts.join('.'))}`;
        }));
        const output = adapterConfig.useStandardOutput
            ? new StandardOutput()
            : new TempFileOutput(this.fileSystem);
        return new CucumberCLIAdapter(config.object(), this.moduleLoader, output);
    }
}
exports.TestRunnerLoader = TestRunnerLoader;
//# sourceMappingURL=TestRunnerLoader.js.map