import { Path, TestRunnerAdapter } from '@serenity-js/core/lib/io';
import { CucumberAdapterConfig } from './CucumberAdapterConfig';
/**
 * @desc
 *  Loads a {@link @serenity-js/core/lib/io~TestRunnerAdapter}, needed to invoke
 *  the chosen test runner programmatically.
 *
 * @public
 */
export declare class TestRunnerLoader {
    private readonly runnerId;
    private readonly moduleLoader;
    private readonly fileSystem;
    private readonly finder;
    /**
     * @param {@serenity-js/core/lib/io~Path} cwd
     *  Current working directory; used to resolve glob paths to files for Cucumber.js to `require`,
     *  and instructing Serenity/JS where to look for this module's optional
     *  dependencies, like [`@serenity-js/cucumber`](/modules/cucumber),
     *  [`@serenity-js/mocha`](/modules/mocha),
     *  [`@serenity-js/jasmine`](/modules/jasmine), etc.
     *
     * @param {number | string} runnerId
     *  Unique identifier used to differentiate output files produced by native Cucumber.js formatters.
     *  For example, `process.pid`
     */
    constructor(cwd: Path, runnerId: number | string);
    /**
     * @param {@serenity-js/jasmine/lib/adapter~JasmineConfig} jasmineNodeOpts
     * @returns {@serenity-js/core/lib/io~TestRunnerAdapter}
     */
    forJasmine(jasmineNodeOpts: object): TestRunnerAdapter;
    /**
     * @param {@serenity-js/mocha/lib/adapter~MochaConfig} mochaOpts
     * @returns {@serenity-js/core/lib/io~TestRunnerAdapter}
     */
    forMocha(mochaOpts: object): TestRunnerAdapter;
    /**
     *
     * @param {@serenity-js/cucumber/lib/cli~CucumberConfig} cucumberOpts
     * @param {CucumberAdapterConfig} adapterConfig
     * @returns {@serenity-js/core/lib/io~TestRunnerAdapter}
     */
    forCucumber(cucumberOpts: object, adapterConfig: CucumberAdapterConfig): TestRunnerAdapter;
}
