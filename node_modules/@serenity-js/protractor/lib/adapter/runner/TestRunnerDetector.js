"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestRunnerDetector = void 0;
/**
 * @desc
 *  Detects the {@link @serenity-js/core/lib/io~TestRunnerAdapter} to use,
 *  based on Protractor configuration.
 *
 * @public
 */
class TestRunnerDetector {
    /**
     * @param {TestRunnerLoader} testRunnerLoader
     */
    constructor(testRunnerLoader) {
        this.testRunnerLoader = testRunnerLoader;
    }
    static protractorCliOptions() {
        return [
            TestRunnerDetector.cucumberOpts,
            TestRunnerDetector.jasmineNodeOpts,
            TestRunnerDetector.mochaOpts,
        ];
    }
    /**
     * @param {protractor~ProtractorConfig} config
     * @returns {TestRunnerAdapter}
     */
    runnerFor(config) {
        const specifiesRunnerFor = (type) => !!config.serenity &&
            !!config.serenity.runner &&
            config.serenity.runner === type;
        switch (true) {
            case specifiesRunnerFor('cucumber'):
                return this.useCucumber(config);
            case specifiesRunnerFor('jasmine'):
                return this.useJasmine(config);
            case specifiesRunnerFor('mocha'):
                return this.useMocha(config);
            case !!config.cucumberOpts:
                return this.useCucumber(config);
            case !!config.mochaOpts:
                return this.useMocha(config);
            case !!config.jasmineNodeOpts:
            default:
                return this.useJasmine(config);
        }
    }
    useJasmine(config) {
        return this.testRunnerLoader.forJasmine(this.mergedConfigFor(config, TestRunnerDetector.jasmineNodeOpts));
    }
    useMocha(config) {
        return this.testRunnerLoader.forMocha(this.mergedConfigFor(config, TestRunnerDetector.mochaOpts));
    }
    useCucumber(config) {
        var _a, _b;
        const serenityReportingServicesConfigured = ((_b = (_a = config === null || config === void 0 ? void 0 : config.serenity) === null || _a === void 0 ? void 0 : _a.crew) === null || _b === void 0 ? void 0 : _b.length) > 0;
        return this.testRunnerLoader.forCucumber(this.mergedConfigFor(config, TestRunnerDetector.cucumberOpts), {
            useStandardOutput: serenityReportingServicesConfigured,
            uniqueFormatterOutputs: this.multiCapabilitiesOrTestShardingEnabled(config),
        });
    }
    mergedConfigFor(config = {}, key) {
        return Object.assign({}, config[key], (config.capabilities || {})[key]);
    }
    multiCapabilitiesOrTestShardingEnabled(config) {
        var _a;
        return !!((Array.isArray(config.multiCapabilities) && config.multiCapabilities.length > 0)
            || typeof config.getMultiCapabilities === 'function'
            || ((_a = config.capabilities) === null || _a === void 0 ? void 0 : _a.shardTestFiles));
    }
}
exports.TestRunnerDetector = TestRunnerDetector;
TestRunnerDetector.cucumberOpts = 'cucumberOpts';
TestRunnerDetector.jasmineNodeOpts = 'jasmineNodeOpts';
TestRunnerDetector.mochaOpts = 'mochaOpts';
//# sourceMappingURL=TestRunnerDetector.js.map