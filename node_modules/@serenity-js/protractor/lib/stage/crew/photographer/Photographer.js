"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Photographer = void 0;
const core_1 = require("@serenity-js/core");
const events_1 = require("@serenity-js/core/lib/events");
/**
 * @desc
 *  The Photographer is a {@link @serenity-js/core/lib/stage~StageCrewMember} who takes screenshots
 *  of the web browser the {@link @serenity-js/core/lib/screenplay/actor~Actor} in the spotlight is using.
 *
 * @example <caption>Assigning the Photographer to the Stage</caption>
 *
 * const { ArtifactArchiver } = require('@serenity-js/core');
 * const { Photographer, TakePhotosOfFailures } = require('@serenity-js/protractor');
 *
 * exports.config = {
 *
 *     serenity: {
 *         crew: [
 *             ArtifactArchiver.storingArtifactsAt('./target/site/serenity'),
 *             Photographer.whoWill(TakePhotosOfFailures),
 *         ]
 *     },
 *
 *     // ... rest of the config omitted for brevity
 * };
 *
 * @example <caption>Taking photos upon failures only</caption>
 *
 * const { Photographer, TakePhotosOfFailures } = require('@serenity-js/protractor');
 *
 * Photographer.whoWill(TakePhotosOfFailures)
 *
 * @example <caption>Taking photos of all the interactions</caption>
 *
 * const { Photographer, TakePhotosOfInteractions } = require('@serenity-js/protractor');
 *
 * Photographer.whoWill(TakePhotosOfInteractions)
 *
 * @example <caption>Taking photos before and after all the interactions</caption>
 *
 * const { Photographer, TakePhotosBeforeAndAfterInteractions } = require('@serenity-js/protractor');
 *
 * Photographer.whoWill(TakePhotosBeforeAndAfterInteractions)
 *
 * @see {@link @serenity-js/core/lib/stage~Stage}
 */
class Photographer {
    /**
     * @param {PhotoTakingStrategy} photoTakingStrategy
     * @param {Stage} stage
     */
    constructor(photoTakingStrategy, stage) {
        this.photoTakingStrategy = photoTakingStrategy;
        this.stage = stage;
    }
    /**
     * @desc
     *  Instantiates a new {@link Photographer} configured to take photos (screenshots)
     *  as per the specified {@link PhotoTakingStrategy}.
     *
     * @param {Function} strategy - A no-arg constructor function that instantiates a {@link PhotoTakingStrategy}.
     * @returns {StageCrewMember}
     */
    static whoWill(strategy) {
        return new Photographer(new strategy());
    }
    /**
     * @desc
     *  Creates a new instance of this {@link StageCrewMember} and assigns it to a given {@link Stage}.
     *
     * @param {Stage} stage - An instance of a {@link Stage} this {@link StageCrewMember} will be assigned to
     * @returns {StageCrewMember} - A new instance of this {@link StageCrewMember}
     */
    assignedTo(stage) {
        return new Photographer(this.photoTakingStrategy, stage);
    }
    /**
     * @desc
     *  Handles {@link DomainEvent} objects emitted by the {@link Stage}
     *  this {@link StageCrewMember} is assigned to.
     *
     * @param {DomainEvent} event
     * @returns void
     */
    notifyOf(event) {
        if (!this.stage) {
            throw new core_1.LogicError(`Photographer needs to be assigned to the Stage before it can be notified of any DomainEvents`);
        }
        if (!this.stage.theShowHasStarted()) {
            return void 0;
        }
        if (event instanceof events_1.ActivityStarts || event instanceof events_1.ActivityFinished) {
            this.photoTakingStrategy.considerTakingPhoto(event, this.stage);
        }
    }
}
exports.Photographer = Photographer;
//# sourceMappingURL=Photographer.js.map