"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Cookie = void 0;
/* eslint-disable unicorn/consistent-function-scoping */
const core_1 = require("@serenity-js/core");
const abilities_1 = require("../abilities");
class Cookie {
    static valueOf(cookieName) {
        return core_1.Transform.the(new CookieDetails(cookieName), details => details && details.value)
            .as(`the value of the "${cookieName}" cookie`);
    }
    static pathOf(cookieName) {
        return core_1.Transform.the(new CookieDetails(cookieName), details => details && details.path)
            .as(`the path of the "${cookieName}" cookie`);
    }
    static domainOf(cookieName) {
        return new CookieDetails(cookieName)
            .map(actor => details => details === null || details === void 0 ? void 0 : details.domain)
            .describedAs(`the domain of the "${cookieName}" cookie`);
    }
    static isHTTPOnly(cookieName) {
        return new CookieDetails(cookieName)
            .map(actor => details => details && !!details.httpOnly)
            .describedAs(`the HTTP-only status of the "${cookieName}" cookie`);
    }
    static isSecure(cookieName) {
        return new CookieDetails(cookieName)
            .map(actor => details => details && !!details.secure)
            .describedAs(`the "secure" status of the "${cookieName}" cookie`);
    }
    static expiryDateOf(cookieName) {
        return new CookieDetails(cookieName)
            .map(actor => details => (details === null || details === void 0 ? void 0 : details.expiry) && new Date(Number(details.expiry) * 1000) // expiry date coming from webdriver is expressed in seconds
        )
            .describedAs(`the expiry date of the "${cookieName}" cookie`);
    }
}
exports.Cookie = Cookie;
/**
 * @package
 */
class CookieDetails extends core_1.Question {
    constructor(name) {
        super(`the details of the "${name} cookie`);
        this.name = name;
    }
    /**
     * @desc
     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}
     *  answer this {@link @serenity-js/core/lib/screenplay~Question}.
     *
     * @param {AnswersQuestions & UsesAbilities} actor
     * @returns {Promise<void>}
     *
     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}
     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}
     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}
     */
    answeredBy(actor) {
        return actor.answer(this.name)
            .then(name => abilities_1.BrowseTheWeb.as(actor).manage().getCookie(name))
            .then(details => details ? details : undefined);
    }
}
//# sourceMappingURL=Cookie.js.map