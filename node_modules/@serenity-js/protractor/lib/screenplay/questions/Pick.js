"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Pick = void 0;
const core_1 = require("@serenity-js/core");
const io_1 = require("@serenity-js/core/lib/io");
/**
 * @deprecated
 *  Please use [Target.all](/modules/protractor/class/src/screenplay/questions/targets/Target.ts~Target.html) instead.
 *
 * @experimental
 *
 * @see {@link @serenity-js/core/lib/screenplay/questions~List}
 */
class Pick {
    constructor(collection, filters = new Filters()) {
        this.collection = collection;
        this.filters = filters;
    }
    static from(collection) {
        return new Pick(collection);
    }
    count() {
        return new NumberOfMatchingItems(this.collection, this.filters);
    }
    all() {
        return new AllMatchingItems(this.collection, this.filters);
    }
    first() {
        return new FirstMatchingItem(this.collection, this.filters);
    }
    last() {
        return new LastMatchingItem(this.collection, this.filters);
    }
    get(index) {
        return new NthMatchingItem(this.collection, this.filters, index);
    }
    where(question, expectation) {
        return new Pick(this.collection, this.filters.append(new Filter(question, expectation)));
    }
}
exports.Pick = Pick;
/**
 * @package
 */
class Filters extends core_1.Question {
    constructor(filters = []) {
        super('');
        this.filters = filters;
        const fullDescription = this.filters
            .reduce((description, filter) => description.concat(filter.toString()), [])
            .join(' and ');
        this.subject = fullDescription.length > 0
            ? `where ${fullDescription}`
            : '';
    }
    append(filter) {
        return new Filters(this.filters.concat(filter));
    }
    /**
     * @desc
     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}
     *  answer this {@link @serenity-js/core/lib/screenplay~Question}.
     *
     * @param {AnswersQuestions & UsesAbilities} actor
     * @returns {Promise<void>}
     *
     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}
     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}
     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}
     */
    answeredBy(actor) {
        return (collection) => this.filters.reduce((filteredCollection, filter) => filter.answeredBy(actor)(filteredCollection), collection);
    }
}
/**
 * @package
 */
class Filter extends core_1.Question {
    constructor(question, expectation) {
        super(io_1.formatted `${question} does ${expectation}`);
        this.question = question;
        this.expectation = expectation;
    }
    /**
     * @desc
     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}
     *  answer this {@link @serenity-js/core/lib/screenplay~Question}.
     *
     * @param {AnswersQuestions & UsesAbilities} actor
     * @returns {Promise<void>}
     *
     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}
     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}
     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}
     */
    answeredBy(actor) {
        return (collection) => collection.filter((item) => {
            const expectation = this.expectation.answeredBy(actor);
            return Promise.resolve(this.question.of(item).answeredBy(actor))
                .then(answer => expectation(answer))
                .then(outcome => outcome instanceof core_1.ExpectationMet);
        });
    }
}
/**
 * @package
 */
class QuestionAboutCollectionItems extends core_1.Question {
    constructor(collection, filters, description) {
        super(`${description} ${io_1.formatted `${collection}`} ${filters.toString()}`.trim());
        this.collection = collection;
        this.filters = filters;
        this.description = description;
    }
    collectionFilteredBy(actor) {
        const collection = this.isAQuestion(this.collection)
            ? this.collection.answeredBy(actor)
            : this.collection;
        return this.filters.answeredBy(actor)(collection);
    }
    isAQuestion(h) {
        return !!h.answeredBy;
    }
}
/**
 * @package
 */
class NumberOfMatchingItems extends QuestionAboutCollectionItems {
    constructor(collection, filters) {
        super(collection, filters, 'the number of');
    }
    /**
     * @desc
     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}
     *  answer this {@link @serenity-js/core/lib/screenplay~Question}.
     *
     * @param {AnswersQuestions & UsesAbilities} actor
     * @returns {Promise<void>}
     *
     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}
     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}
     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}
     */
    answeredBy(actor) {
        return Promise.resolve(this.collectionFilteredBy(actor).count());
    }
}
/**
 * @package
 */
class AllMatchingItems extends QuestionAboutCollectionItems {
    constructor(collection, filters) {
        super(collection, filters, '');
    }
    /**
     * @desc
     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}
     *  answer this {@link @serenity-js/core/lib/screenplay~Question}.
     *
     * @param {AnswersQuestions & UsesAbilities} actor
     * @returns {Promise<void>}
     *
     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}
     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}
     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}
     */
    answeredBy(actor) {
        return this.collectionFilteredBy(actor);
    }
}
/**
 * @package
 */
class FirstMatchingItem extends QuestionAboutCollectionItems {
    constructor(collection, filters) {
        super(collection, filters, 'the first of');
    }
    /**
     * @desc
     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}
     *  answer this {@link @serenity-js/core/lib/screenplay~Question}.
     *
     * @param {AnswersQuestions & UsesAbilities} actor
     * @returns {Promise<void>}
     *
     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}
     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}
     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}
     */
    answeredBy(actor) {
        return this.collectionFilteredBy(actor).first();
    }
}
/**
 * @package
 */
class LastMatchingItem extends QuestionAboutCollectionItems {
    constructor(collection, filters) {
        super(collection, filters, 'the last of');
    }
    /**
     * @desc
     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}
     *  answer this {@link @serenity-js/core/lib/screenplay~Question}.
     *
     * @param {AnswersQuestions & UsesAbilities} actor
     * @returns {Promise<void>}
     *
     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}
     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}
     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}
     */
    answeredBy(actor) {
        return this.collectionFilteredBy(actor).last();
    }
}
/**
 * @package
 */
class NthMatchingItem extends QuestionAboutCollectionItems {
    constructor(collection, filters, index) {
        super(collection, filters, `the ${NthMatchingItem.ordinalSuffixOf(index + 1)} of`);
        this.index = index;
    }
    static ordinalSuffixOf(index) {
        const lastDigit = index % 10, lastTwoDigits = index % 100;
        switch (true) {
            case (lastDigit === 1 && lastTwoDigits !== 11):
                return index + 'st';
            case (lastDigit === 2 && lastTwoDigits !== 12):
                return index + 'nd';
            case (lastDigit === 3 && lastTwoDigits !== 13):
                return index + 'rd';
            default:
                return index + 'th';
        }
    }
    /**
     * @desc
     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}
     *  answer this {@link @serenity-js/core/lib/screenplay~Question}.
     *
     * @param {AnswersQuestions & UsesAbilities} actor
     * @returns {Promise<void>}
     *
     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}
     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}
     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}
     */
    answeredBy(actor) {
        return this.collectionFilteredBy(actor).get(this.index);
    }
}
//# sourceMappingURL=Pick.js.map