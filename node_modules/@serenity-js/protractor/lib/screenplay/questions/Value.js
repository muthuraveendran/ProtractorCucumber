"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Value = void 0;
const core_1 = require("@serenity-js/core");
const io_1 = require("@serenity-js/core/lib/io");
const Attribute_1 = require("./Attribute");
const targets_1 = require("./targets");
/**
 * @desc
 *  Resolves to the value of a given [`input`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input)
 *  {@link WebElement}, represented by {@link ElementFinder} or `Question<ElementFinder>`.
 *
 * @extends {@serenity-js/core/lib/screenplay~Question}
 * @implements {@serenity-js/core/lib/screenplay/questions~MetaQuestion}
 */
class Value extends core_1.Question {
    /**
     * @param {Question<ElementFinder> | ElementFinder} target
     */
    constructor(target) {
        super(io_1.formatted `the value of ${target}`);
        this.target = target;
    }
    /**
     * @param {Question<ElementFinder> | ElementFinder} target
     * @returns {Value}
     */
    static of(target) {
        return new Value(target);
    }
    /**
     * @desc
     *  Resolves to the value of a given [`input`](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input)
     *  {@link WebElement}, located in the context of a `parent` element.
     *
     * @param {Question<ElementFinder> | ElementFinder} parent
     * @returns {Question<Promise<string[]>>}
     *
     * @see {@link Target.all}
     * @see {@link @serenity-js/core/lib/screenplay/questions~MetaQuestion}
     */
    of(parent) {
        return new Value(new targets_1.TargetNestedElement(parent, this.target));
    }
    /**
     * @desc
     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}
     *  answer this {@link @serenity-js/core/lib/screenplay~Question}.
     *
     * @param {AnswersQuestions & UsesAbilities} actor
     * @returns {Promise<void>}
     *
     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}
     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}
     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}
     */
    answeredBy(actor) {
        return Attribute_1.Attribute.of(this.target).called('value').answeredBy(actor);
    }
}
exports.Value = Value;
//# sourceMappingURL=Value.js.map