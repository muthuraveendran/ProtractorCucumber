"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Text = void 0;
const TextOfMultipleElements_1 = require("./TextOfMultipleElements");
const TextOfSingleElement_1 = require("./TextOfSingleElement");
/**
 * @desc
 *  Resolves to the visible (i.e. not hidden by CSS) `innerText` of:
 *  - a given {@link WebElement}, represented by {@link ElementFinder} or `Question<ElementFinder>`,
 *  - a group of {@link WebElement}s, represented by {@link ElementArrayFinder} or `Question<ElementArrayFinder>`.
 *
 *  The result includes the visible text of any sub-elements, without any leading or trailing whitespace.
 *
 * @public
 *
 * @extends {@serenity-js/core/lib/screenplay~Question}
 * @implements {@serenity-js/core/lib/screenplay/questions~MetaQuestion}
 */
class Text {
    /**
     * @desc
     *  Retrieves text of a single {@link WebElement},
     *  represented by {@link ElementFinder}
     *  or `Question<ElementFinder>`.
     *
     * @param {Question<ElementFinder> | ElementFinder} target
     * @returns {Question<Promise<string>> & MetaQuestion<Question<ElementFinder> | ElementFinder, Promise<string>>}
     *
     * @see {@link @serenity-js/core/lib/screenplay/questions~MetaQuestion}
     */
    static of(target) {
        return new TextOfSingleElement_1.TextOfSingleElement(target);
    }
    /**
     * @desc
     *  Retrieves text of a group of {@link WebElement}s,
     *  represented by {@link ElementArrayFinder}
     *  or `Question<ElementArrayFinder>`
     *
     * @param {Question<ElementArrayFinder> | ElementArrayFinder} target
     * @returns {Question<Promise<string[]>> & MetaQuestion<Question<ElementFinder> | ElementFinder, Promise<string[]>>}
     *
     * @see {@link @serenity-js/core/lib/screenplay/questions~MetaQuestion}
     */
    static ofAll(target) {
        return new TextOfMultipleElements_1.TextOfMultipleElements(target);
    }
}
exports.Text = Text;
//# sourceMappingURL=Text.js.map