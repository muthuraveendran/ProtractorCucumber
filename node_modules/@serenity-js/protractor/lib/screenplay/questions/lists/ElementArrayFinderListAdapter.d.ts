import { ListAdapter } from '@serenity-js/core/lib/screenplay/questions/lists';
import { AnswersQuestions, Expectation, MetaQuestion, Question, UsesAbilities } from '@serenity-js/core';
import { ElementArrayFinder, ElementFinder } from 'protractor';
/**
 * @desc
 *  Adapts {@link ElementArrayFinder} so that it can be used with {@link @serenity-js/core/lib/screenplay/questions~List}.
 *
 *  You most likely won't need to use this class directly. Instead, check out {@link Target} and {@link Target.all}.
 *
 * @see {@link Target}
 *
 * @implements {@serenity-js/core/lib/screenplay/questions/lists~ListAdapter}
 */
export declare class ElementArrayFinderListAdapter implements ListAdapter<ElementFinder, ElementArrayFinder> {
    private readonly collection;
    /**
     * @param {Question<ElementArrayFinder> | ElementArrayFinder} collection
     */
    constructor(collection: Question<ElementArrayFinder> | ElementArrayFinder);
    /**
     * @desc
     *  Returns the number of {@link ElementFinder}s that the underlying {@link ElementArrayFinder} contains,
     *  left after applying any filters.
     *
     * @param {AnswersQuestions & UsesAbilities} actor
     * @returns {Promise<number>}
     */
    count(actor: AnswersQuestions & UsesAbilities): Promise<number>;
    /**
     * @desc
     *  Returns the first of {@link ElementFinder}s that the underlying {@link ElementArrayFinder} contains,
     *  left after applying any filters
     *
     * @param {AnswersQuestions & UsesAbilities} actor
     * @returns {ElementFinder}
     */
    first(actor: AnswersQuestions & UsesAbilities): ElementFinder;
    /**
     * @desc
     *  Returns the last of {@link ElementFinder}s that the underlying {@link ElementArrayFinder} contains,
     *  left after applying any filters
     *
     * @param {AnswersQuestions & UsesAbilities} actor
     * @returns {ElementFinder}
     */
    last(actor: AnswersQuestions & UsesAbilities): ElementFinder;
    /**
     * @desc
     *  Returns the nth of {@link ElementFinder}s that the underlying {@link ElementArrayFinder} contains,
     *  left after applying any filters
     *
     * @param {AnswersQuestions & UsesAbilities} actor
     *
     * @param {number} index
     *  Zero-based index of the item to return
     *
     * @returns {ElementFinder}
     */
    get(actor: AnswersQuestions & UsesAbilities, index: number): ElementFinder;
    /**
     * @desc
     *  Returns the underlying {@link ElementArrayFinder},
     *  with any filters applied.
     *
     * @param {AnswersQuestions & UsesAbilities} actor
     * @returns {ElementFinder}
     */
    items(actor: AnswersQuestions & UsesAbilities): ElementArrayFinder;
    /**
     * @desc
     *  Filters the underlying {@link ElementArrayFinder} so that the result contains only those {@link ElementFinder}s that meet the {@link Expectation}
     *
     * @param {@serenity-js/core/lib/screenplay/questions~MetaQuestion<ElementFinder, Promise<Answer_Type> | Answer_Type>} question
     * @param {@serenity-js/core/lib/screenplay/questions~Expectation<any, Answer_Type>} expectation
     *
     * @returns {@serenity-js/core/lib/screenplay/questions/lists~ListAdapter<ElementFinder, ElementArrayFinder>}
     *
     * @see {@link @serenity-js/core/lib/screenplay/questions~MetaQuestion}
     */
    withFilter<Answer_Type>(question: MetaQuestion<ElementFinder, Promise<Answer_Type> | Answer_Type>, expectation: Expectation<any, Answer_Type>): ListAdapter<ElementFinder, ElementArrayFinder>;
    /**
     * @desc
     *  Returns a human-readable description of the underlying {@link ElementArrayFinder}.
     *
     * @returns {string}
     */
    toString(): string;
    private elements;
}
