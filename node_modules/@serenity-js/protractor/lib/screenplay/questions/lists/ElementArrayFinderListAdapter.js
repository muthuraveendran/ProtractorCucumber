"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ElementArrayFinderListAdapter = void 0;
const io_1 = require("@serenity-js/core/lib/io");
const core_1 = require("@serenity-js/core");
/**
 * @desc
 *  Adapts {@link ElementArrayFinder} so that it can be used with {@link @serenity-js/core/lib/screenplay/questions~List}.
 *
 *  You most likely won't need to use this class directly. Instead, check out {@link Target} and {@link Target.all}.
 *
 * @see {@link Target}
 *
 * @implements {@serenity-js/core/lib/screenplay/questions/lists~ListAdapter}
 */
class ElementArrayFinderListAdapter {
    /**
     * @param {Question<ElementArrayFinder> | ElementArrayFinder} collection
     */
    constructor(collection) {
        this.collection = collection;
    }
    /**
     * @desc
     *  Returns the number of {@link ElementFinder}s that the underlying {@link ElementArrayFinder} contains,
     *  left after applying any filters.
     *
     * @param {AnswersQuestions & UsesAbilities} actor
     * @returns {Promise<number>}
     */
    count(actor) {
        return Promise.resolve(this.elements(actor).count());
    }
    /**
     * @desc
     *  Returns the first of {@link ElementFinder}s that the underlying {@link ElementArrayFinder} contains,
     *  left after applying any filters
     *
     * @param {AnswersQuestions & UsesAbilities} actor
     * @returns {ElementFinder}
     */
    first(actor) {
        return this.elements(actor).first();
    }
    /**
     * @desc
     *  Returns the last of {@link ElementFinder}s that the underlying {@link ElementArrayFinder} contains,
     *  left after applying any filters
     *
     * @param {AnswersQuestions & UsesAbilities} actor
     * @returns {ElementFinder}
     */
    last(actor) {
        return this.elements(actor).last();
    }
    /**
     * @desc
     *  Returns the nth of {@link ElementFinder}s that the underlying {@link ElementArrayFinder} contains,
     *  left after applying any filters
     *
     * @param {AnswersQuestions & UsesAbilities} actor
     *
     * @param {number} index
     *  Zero-based index of the item to return
     *
     * @returns {ElementFinder}
     */
    get(actor, index) {
        return this.elements(actor).get(index);
    }
    /**
     * @desc
     *  Returns the underlying {@link ElementArrayFinder},
     *  with any filters applied.
     *
     * @param {AnswersQuestions & UsesAbilities} actor
     * @returns {ElementFinder}
     */
    items(actor) {
        return this.elements(actor);
    }
    /**
     * @desc
     *  Filters the underlying {@link ElementArrayFinder} so that the result contains only those {@link ElementFinder}s that meet the {@link Expectation}
     *
     * @param {@serenity-js/core/lib/screenplay/questions~MetaQuestion<ElementFinder, Promise<Answer_Type> | Answer_Type>} question
     * @param {@serenity-js/core/lib/screenplay/questions~Expectation<any, Answer_Type>} expectation
     *
     * @returns {@serenity-js/core/lib/screenplay/questions/lists~ListAdapter<ElementFinder, ElementArrayFinder>}
     *
     * @see {@link @serenity-js/core/lib/screenplay/questions~MetaQuestion}
     */
    withFilter(question, expectation) {
        return new ElementArrayFinderListAdapter(new ElementArrayFinderArrayListFilter(this.collection, question, expectation));
    }
    /**
     * @desc
     *  Returns a human-readable description of the underlying {@link ElementArrayFinder}.
     *
     * @returns {string}
     */
    toString() {
        return io_1.formatted `${this.collection}`;
    }
    elements(actor) {
        return core_1.Question.isAQuestion(this.collection)
            ? this.collection.answeredBy(actor)
            : this.collection;
    }
}
exports.ElementArrayFinderListAdapter = ElementArrayFinderListAdapter;
/**
 * @private
 */
class ElementArrayFinderArrayListFilter extends core_1.Question {
    constructor(collection, question, expectation) {
        super([
            io_1.formatted `${collection}`,
            collection instanceof ElementArrayFinderArrayListFilter ? 'and' : 'where',
            io_1.formatted `${question} does ${expectation}`
        ].join(' '));
        this.collection = collection;
        this.question = question;
        this.expectation = expectation;
    }
    answeredBy(actor) {
        return this.finderAs(actor)
            .filter((elementFinder) => Promise.resolve(this.question.of(elementFinder).answeredBy(actor))
            .then(answer => this.expectation.answeredBy(actor)(answer))
            .then(outcome => outcome instanceof core_1.ExpectationMet));
    }
    finderAs(actor) {
        return core_1.Question.isAQuestion(this.collection)
            ? this.collection.answeredBy(actor)
            : this.collection;
    }
}
//# sourceMappingURL=ElementArrayFinderListAdapter.js.map