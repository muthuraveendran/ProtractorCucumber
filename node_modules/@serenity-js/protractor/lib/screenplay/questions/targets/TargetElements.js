"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TargetElements = void 0;
const core_1 = require("@serenity-js/core");
const abilities_1 = require("../../abilities");
const override_1 = require("./override");
const TargetNestedElements_1 = require("./TargetNestedElements");
const lists_1 = require("../lists");
/**
 * @desc
 *  Locates a group of {@link WebElement}s.
 *
 *  Instead of using this class directly, please use {@link Target.all} instead.
 *
 * @public
 * @see {@link Target}
 *
 * @extends {@serenity-js/core/lib/screenplay~Question}
 * @implements {@serenity-js/core/lib/screenplay/questions~MetaQuestion}
 */
class TargetElements extends core_1.Question {
    /**
     * @desc
     *
     * @param {string} description - A human-readable description to be used in the report
     * @param {protractor~Locator} locator - A locator to be used when locating the element
     */
    constructor(description, locator) {
        super(`the ${description}`);
        this.description = description;
        this.locator = locator;
        this.list = new core_1.List(new lists_1.ElementArrayFinderListAdapter(this));
    }
    /**
     * @desc
     *  Retrieves a group of {@link WebElement}s located by `locator`,
     *  resolved in the context of a `parent` {@link WebElement}.
     *
     * @param {Question<ElementFinder> | ElementFinder} parent
     * @returns {TargetNestedElements}
     *
     * @see {@link Target}
     */
    of(parent) {
        return new TargetNestedElements_1.TargetNestedElements(parent, this);
    }
    /**
     * @desc
     *  Returns the number of {@link ElementFinder}s matched by the `locator`
     *
     * @returns {@serenity-js/core/lib/screenplay~Question<Promise<number>>}
     *
     * @see {@link @serenity-js/core/lib/screenplay/questions~List}
     */
    count() {
        return this.list.count();
    }
    /**
     * @desc
     *  Returns the first of {@link ElementFinder}s matched by the `locator`
     *
     * @returns {@serenity-js/core/lib/screenplay~Question<ElementFinder>}
     *
     * @see {@link @serenity-js/core/lib/screenplay/questions~List}
     */
    first() {
        return this.list.first();
    }
    /**
     * @desc
     *  Returns the last of {@link ElementFinder}s matched by the `locator`
     *
     * @returns {@serenity-js/core/lib/screenplay~Question<ElementFinder>}
     *
     * @see {@link @serenity-js/core/lib/screenplay/questions~List}
     */
    last() {
        return this.list.last();
    }
    /**
     * @desc
     *  Returns an {@link ElementFinder} at `index` for `locator`
     *
     * @param {number} index
     *
     * @returns {@serenity-js/core/lib/screenplay~Question<ElementFinder>}
     *
     * @see {@link @serenity-js/core/lib/screenplay/questions~List}
     */
    get(index) {
        return this.list.get(index);
    }
    /**
     * @desc
     *  Filters the list of {@link ElementFinder}s matched by `locator` to those that meet the additional {@link @serenity-js/core/lib/screenplay/questions~Expectation}s.
     *
     * @param {@serenity-js/core/lib/screenplay/questions~MetaQuestion<ElementFinder, Promise<Answer_Type> | Answer_Type>} question
     * @param {@serenity-js/core/lib/screenplay/questions~Expectation<any, Answer_type>} expectation
     *
     * @returns {@serenity-js/core/lib/screenplay/questions~List<ElementArrayFinderListAdapter, ElementFinder, ElementArrayFinder>}
     *
     * @see {@link @serenity-js/core/lib/screenplay/questions~List}
     */
    where(question, expectation) {
        return this.list.where(question, expectation);
    }
    /**
     * @desc
     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}
     *  answer this {@link @serenity-js/core/lib/screenplay~Question}.
     *
     * @param {AnswersQuestions & UsesAbilities} actor
     * @returns {Promise<void>}
     *
     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}
     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}
     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}
     */
    answeredBy(actor) {
        return override_1.override(abilities_1.BrowseTheWeb.as(actor).locateAll(this.locator), 'toString', this.toString.bind(this));
    }
}
exports.TargetElements = TargetElements;
//# sourceMappingURL=TargetElements.js.map