"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TargetNestedElement = void 0;
const core_1 = require("@serenity-js/core");
const withAnswerOf_1 = require("../../withAnswerOf");
const override_1 = require("./override");
/**
 * @desc
 *  Locates a single {@link WebElement} located within another {@link WebElement}.
 *
 *  Instead of using this class directly, please use {@link Target.the} and {@link TargetElement#of} instead.
 *
 * @public
 * @see {@link Target}
 *
 * @extends {@serenity-js/core/lib/screenplay~Question}
 * @implements {@serenity-js/core/lib/screenplay/questions~MetaQuestion}
 */
class TargetNestedElement extends core_1.Question {
    /**
     * @desc
     *
     * @param {Question<ElementFinder> | ElementFinder} parent
     * @param {Question<ElementFinder> | ElementFinder} child
     */
    constructor(parent, child) {
        super(`${child.toString()} of ${parent}`);
        this.parent = parent;
        this.child = child;
    }
    /**
     * @desc
     *  Retrieves a {@link WebElement} located by `locator`,
     *  resolved in the context of a `parent` {@link WebElement}.
     *
     * @param {Question<ElementFinder> | ElementFinder} parent
     * @returns {TargetNestedElement}
     *
     * @see {@link Target}
     */
    of(parent) {
        return new TargetNestedElement(parent, this);
    }
    /**
     * @desc
     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}
     *  answer this {@link @serenity-js/core/lib/screenplay~Question}.
     *
     * @param {AnswersQuestions & UsesAbilities} actor
     * @returns {Promise<void>}
     *
     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}
     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}
     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}
     */
    answeredBy(actor) {
        return withAnswerOf_1.withAnswerOf(actor, this.parent, parent => withAnswerOf_1.withAnswerOf(actor, this.child, child => override_1.override(parent.element(child.locator()), 'toString', this.toString.bind(this))));
    }
}
exports.TargetNestedElement = TargetNestedElement;
//# sourceMappingURL=TargetNestedElement.js.map