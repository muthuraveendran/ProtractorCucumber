"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TargetElement = void 0;
const core_1 = require("@serenity-js/core");
const abilities_1 = require("../../abilities");
const override_1 = require("./override");
const TargetNestedElement_1 = require("./TargetNestedElement");
/**
 * @desc
 *  Locates a single {@link WebElement}.
 *
 *  Instead of using this class directly, please use {@link Target.the} instead.
 *
 * @public
 * @see {@link Target}
 *
 * @extends {@serenity-js/core/lib/screenplay~Question}
 * @implements {@serenity-js/core/lib/screenplay/questions~MetaQuestion}
 */
class TargetElement extends core_1.Question {
    /**
     * @desc
     *
     * @param {string} description - A human-readable description to be used in the report
     * @param {protractor~Locator} locator - A locator to be used when locating the element
     */
    constructor(description, locator) {
        super(`the ${description}`);
        this.description = description;
        this.locator = locator;
    }
    /**
     * @desc
     *  Retrieves a {@link WebElement} located by `locator`,
     *  resolved in the context of a `parent` {@link WebElement}.
     *
     * @param {Question<ElementFinder> | ElementFinder} parent
     * @returns {TargetNestedElement}
     *
     * @see {@link Target}
     */
    of(parent) {
        return new TargetNestedElement_1.TargetNestedElement(parent, this);
    }
    /**
     * @desc
     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}
     *  answer this {@link @serenity-js/core/lib/screenplay~Question}.
     *
     * @param {AnswersQuestions & UsesAbilities} actor
     * @returns {Promise<void>}
     *
     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}
     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}
     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}
     */
    answeredBy(actor) {
        return override_1.override(abilities_1.BrowseTheWeb.as(actor).locate(this.locator), 'toString', this.toString.bind(this));
    }
}
exports.TargetElement = TargetElement;
//# sourceMappingURL=TargetElement.js.map