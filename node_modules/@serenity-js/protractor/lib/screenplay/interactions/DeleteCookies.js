"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeleteCookies = void 0;
const io_1 = require("@serenity-js/core/lib/io");
const promiseOf_1 = require("../../promiseOf");
const abilities_1 = require("../abilities");
/**
 * @desc
 *  Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to
 *  remove cookies from the browser.
 *
 * @example <caption>Removing a single cookie</caption>
 *  import { actorCalled } from '@serenity-js/core';
 *  import { BrowseTheWeb, Navigate, DeleteCookies } from '@serenity-js/protractor';
 *  import { protractor } from 'protractor';
 *
 *  actorCalled('Sid')
 *      .whoCan(BrowseTheWeb.using(protractor.browser))
 *      .attemptsTo(
 *          Navigate.to('/login'),
 *          DeleteCookies.called('jwt_token'),
 *          Navigate.reloadPage(),
 *      );
 *
 * @example <caption>Removing all cookies before each Jasmine test</caption>
 *  import 'jasmine';
 *
 *  import { actorInTheSpotlight } from '@serenity-js/core';
 *  import { DeleteCookies } from '@serenity-js/protractor';
 *
 *  before(() =>
 *      actorInTheSpotlight().attemptsTo(
 *          DeleteCookies.all(),
 *      ));
 *
 * @example <caption>Removing all cookies before each Mocha test</caption>
 *  import 'mocha';
 *
 *  import { actorInTheSpotlight } from '@serenity-js/core';
 *  import { DeleteCookies } from '@serenity-js/protractor';
 *
 *  before(() =>
 *      actorInTheSpotlight().attemptsTo(
 *          DeleteCookies.all(),
 *      ));
 *
 * @example <caption>Removing all cookies before each Cucumber scenario</caption>
 *  import { actorInTheSpotlight } from '@serenity-js/core';
 *  import { DeleteCookies } from '@serenity-js/protractor';
 *  import { Before } from 'cucumber';
 *
 *  Before(() =>
 *      actorInTheSpotlight().attemptsTo(
 *          DeleteCookies.all(),
 *      ));
 *
 * @see {@link Navigate}
 */
class DeleteCookies {
    /**
     * @desc
     *  Removes a single cookie identified by `cookieName`.
     *
     * @param {Answerable<string>} cookieName
     *  The name of the cookie to be deleted
     *
     * @returns {@link @serenity-js/core/lib/screenplay~Interaction}
     */
    static called(cookieName) {
        return new DeleteCookieCalled(cookieName);
    }
    /**
     * @desc
     *  Removes any cookies set.
     *
     * @returns {@link @serenity-js/core/lib/screenplay~Interaction}
     */
    static all() {
        return new DeletesAllCookies();
    }
}
exports.DeleteCookies = DeleteCookies;
/**
 * @package
 */
class DeleteCookieCalled {
    constructor(name) {
        this.name = name;
    }
    /**
     * @desc
     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}
     *  perform this {@link @serenity-js/core/lib/screenplay~Interaction}.
     *
     * @param {UsesAbilities & AnswersQuestions} actor
     *  An {@link @serenity-js/core/lib/screenplay/actor~Actor} to perform this {@link @serenity-js/core/lib/screenplay~Interaction}
     *
     * @returns {PromiseLike<void>}
     *
     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}
     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}
     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}
     */
    performAs(actor) {
        return actor.answer(this.name)
            .then(name => abilities_1.BrowseTheWeb.as(actor).manage().deleteCookie(name));
    }
    /**
     * @desc
     *  Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.
     *
     * @returns {string}
     */
    toString() {
        return io_1.formatted `#actor deletes the "${this.name}" cookie`;
    }
}
/**
 * @package
 */
class DeletesAllCookies {
    /**
     * @desc
     *  Makes the provided {@link @serenity-js/core/lib/screenplay/actor~Actor}
     *  perform this {@link @serenity-js/core/lib/screenplay~Interaction}.
     *
     * @param {UsesAbilities & AnswersQuestions} actor
     *  An {@link @serenity-js/core/lib/screenplay/actor~Actor} to perform this {@link @serenity-js/core/lib/screenplay~Interaction}
     *
     * @returns {PromiseLike<void>}
     *
     * @see {@link @serenity-js/core/lib/screenplay/actor~Actor}
     * @see {@link @serenity-js/core/lib/screenplay/actor~UsesAbilities}
     * @see {@link @serenity-js/core/lib/screenplay/actor~AnswersQuestions}
     */
    performAs(actor) {
        return promiseOf_1.promiseOf(abilities_1.BrowseTheWeb.as(actor).manage().deleteAllCookies());
    }
    /**
     * @desc
     *  Generates a description to be used when reporting this {@link @serenity-js/core/lib/screenplay~Activity}.
     *
     * @returns {string}
     */
    toString() {
        return `#actor deletes all cookies`;
    }
}
//# sourceMappingURL=DeleteCookies.js.map