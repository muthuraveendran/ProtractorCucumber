import { Answerable, Duration, Interaction } from '@serenity-js/core';
/**
 * @desc
 *  Allows the {@link @serenity-js/core/lib/screenplay/actor~Actor} to navigate to a specific destination,
 *  as well as back and forth in the browser history, or reload the current page.
 */
export declare class Navigate {
    /**
     * @desc
     *  Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to
     *  navigate to a given URL.
     *
     *  The URL can be:
     *  - absolute, i.e. `https://example.org/search`
     *  - relative, i.e. `/search`
     *
     *  If the URL is relative, Protractor will append it to `baseUrl` configured in [`protractor.conf.js`](https://github.com/angular/protractor/blob/master/lib/config.ts).
     *
     * @example <caption>protractor.conf.js</caption>
     *  exports.config = {
     *      baseUrl: 'https://example.org',
     *      // ...
     *  }
     *
     * @example <caption>Navigate to path relative to baseUrl</caption>
     *  import { actorCalled } from '@serenity-js/core';
     *  import { BrowseTheWeb, Navigate } from '@serenity-js/protractor';
     *
     *  actorCalled('Hannu')
     *      .whoCan(BrowseTheWeb.using(protractor.browser))
     *      .attemptsTo(
     *          Navigate.to('/search'),
     *      );
     *
     * @example <caption>Navigate to an absolute URL (overrides baseUrl)</caption>
     *  import { actorCalled } from '@serenity-js/core';
     *  import { BrowseTheWeb, Navigate } from '@serenity-js/protractor';
     *
     *  actorCalled('Hannu')
     *      .whoCan(BrowseTheWeb.using(protractor.browser))
     *      .attemptsTo(
     *          Navigate.to('https://mycompany.org/login'),
     *      );
     *
     * @example <caption>Navigate to URL with timeout</caption>
     *  import { actorCalled, Duration } from '@serenity-js/core';
     *  import { BrowseTheWeb, Navigate } from '@serenity-js/protractor';
     *
     *  actorCalled('Hannu')
     *      .whoCan(BrowseTheWeb.using(protractor.browser))
     *      .attemptsTo(
     *          Navigate.to('/search').withTimeout(Duration.ofSeconds(2)),
     *      );
     *
     * @param {Answerable<string>} url
     *  An absolute URL or path an {@link @serenity-js/core/lib/screenplay/actor~Actor} should navigate to
     *
     * @returns {@serenity-js/core/lib/screenplay~Interaction & { withTimeout: (duration: Answerable<Duration>) => Interaction }}
     *
     * @see {@link BrowseTheWeb}
     * @see {@link @serenity-js/core~Duration}
     */
    static to(url: Answerable<string>): Interaction & {
        withTimeout: (duration: Answerable<Duration>) => Interaction;
    };
    /**
     * @desc
     *  Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to
     *  navigate back one page in the session history.
     *
     * @example <caption>Navigate to path relative to baseUrl</caption>
     *  import { actorCalled } from '@serenity-js/core';
     *  import { Ensure, endsWith } from '@serenity-js/assertions';
     *  import { BrowseTheWeb, Navigate } from '@serenity-js/protractor';
     *
     *  actorCalled('Hannu')
     *      .whoCan(BrowseTheWeb.using(protractor.browser))
     *      .attemptsTo(
     *          Navigate.to('/first'),
     *          Navigate.to('/second'),
     *
     *          Navigate.back(),
     *
     *          Ensure.that(Website.url(), endsWith('/first')),
     *      );
     *
     * @returns {@serenity-js/core/lib/screenplay~Interaction}
     *
     * @see {@link BrowseTheWeb}
     * @see {@link @serenity-js/assertions~Ensure}
     * @see {@link @serenity-js/assertions/lib/expectations~endsWith}
     */
    static back(): Interaction;
    /**
     * @desc
     *  Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to
     *  navigate forward one page in the session history.
     *
     * @example <caption>Navigate to path relative to baseUrl</caption>
     *  import { actorCalled } from '@serenity-js/core';
     *  import { Ensure, endsWith } from '@serenity-js/assertions';
     *  import { BrowseTheWeb, Navigate } from '@serenity-js/protractor';
     *
     *  actorCalled('Hannu')
     *      .whoCan(BrowseTheWeb.using(protractor.browser))
     *      .attemptsTo(
     *          Navigate.to('/first'),
     *          Navigate.to('/second'),
     *
     *          Navigate.back(),
     *          Navigate.forward(),
     *
     *          Ensure.that(Website.url(), endsWith('/second')),
     *      );
     *
     * @returns {@serenity-js/core/lib/screenplay~Interaction}
     *
     * @see {@link BrowseTheWeb}
     * @see {@link @serenity-js/assertions~Ensure}
     * @see {@link @serenity-js/assertions/lib/expectations~endsWith}
     */
    static forward(): Interaction;
    /**
     * @desc
     *  Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to
     *  reload the current page.
     *
     * @example <caption>Navigate to path relative to baseUrl</caption>
     *  import { actorCalled } from '@serenity-js/core';
     *  import { Ensure, endsWith } from '@serenity-js/assertions';
     *  import { Navigate, BrowseTheWeb, DeleteCookies } from '@serenity-js/protractor';
     *
     *  actorCalled('Hannu')
     *      .whoCan(BrowseTheWeb.using(protractor.browser))
     *      .attemptsTo(
     *          Navigate.to('/login'),
     *          DeleteCookies.called('session_id'),
     *          Navigate.reloadPage(),
     *      );
     *
     * @returns {@serenity-js/core/lib/screenplay~Interaction}
     *
     * @see {@link BrowseTheWeb}
     * @see {@link DeleteCookies}
     * @see {@link @serenity-js/assertions~Ensure}
     * @see {@link @serenity-js/assertions/lib/expectations~endsWith}
     */
    static reloadPage(): Interaction;
}
