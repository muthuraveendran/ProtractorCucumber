"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Close = void 0;
const core_1 = require("@serenity-js/core");
const abilities_1 = require("../abilities");
/**
 * @desc
 *  Instructs the {@link @serenity-js/core/lib/screenplay/actor~Actor} to
 *  close browser tabs or windows.
 *
 * @example <caption>Closing a browser tab or window</caption>
 *  import { actorCalled } from '@serenity-js/core';
 *  import { BrowseTheWeb, Click, Close, Switch } from '@serenity-js/protractor';
 *  import { protractor } from 'protractor';
 *
 *  actorCalled('Caleb')
 *      .whoCan(BrowseTheWeb.using(protractor.browser))
 *      .attemptsTo(
 *          Click.on(someLinkThatOpensANewWindow),
 *
 *          Switch.toNewWindow().and(
 *              // perform activities in the context of the new window
 *              Close.currentWindow(),
 *          ),
 *      );
 *
 * @example <caption>Closing any new windows after a Jasmine test</caption>
 *  import 'jasmine';
 *
 *  import { actorInTheSpotlight } from '@serenity-js/core';
 *  import { Close } from '@serenity-js/protractor';
 *
 *  after(() =>
 *      actorInTheSpotlight().attemptsTo(
 *          Close.anyNewWindows(),
 *      ));
 *
 * @example <caption>Closing any new windows after a Mocha test</caption>
 *  import 'mocha';
 *
 *  import { actorInTheSpotlight } from '@serenity-js/core';
 *  import { Close } from '@serenity-js/protractor';
 *
 *  after(() =>
 *      actorInTheSpotlight().attemptsTo(
 *          Close.anyNewWindows(),
 *      ));
 *
 * @example <caption>Closing any new windows after a    Cucumber scenario</caption>
 *  import { actorInTheSpotlight } from '@serenity-js/core';
 *  import { Close } from '@serenity-js/protractor';
 *  import { After } from 'cucumber';
 *
 *  After(() =>
 *      actorInTheSpotlight().attemptsTo(
 *          Close.anyNewWindows(),
 *      ));
 *
 * @see {@link Switch}
 */
class Close {
    /**
     * @desc
     *  Closes any windows other than the original one that
     *  the {@link @serenity-js/core/lib/screenplay/actor~Actor}
     *  has {@link Navigate}d to.
     *
     *  When the windows are closed, it switches the context
     *  back to the original window.
     *
     * @static
     * @returns {@link @serenity-js/core/lib/screenplay~Interaction}
     *
     * @see {@link Switch}
     */
    static anyNewWindows() {
        return new CloseWindowsOtherThan(actor => abilities_1.BrowseTheWeb.as(actor).getOriginalWindowHandle(), `#actor closes any new windows`);
    }
    /**
     * @desc
     *  Closes the currently focused browser window.
     *
     *  **Please note** that this interaction should be used to close
     *  pop-up windows or any new windows/tabs opened during the test
     *  rather than the _main_ window, which is managed by Protractor.
     *
     *  See tests for usage examples.
     *
     * @static
     * @returns {@link @serenity-js/core/lib/screenplay~Interaction}
     *
     * @see {@link Switch}
     */
    static currentWindow() {
        return new CloseCurrentWindow();
    }
}
exports.Close = Close;
/**
 * @package
 */
class CloseWindowsOtherThan extends core_1.Interaction {
    constructor(windowToKeepBy, description = `#actor closes several windows`) {
        super();
        this.windowToKeepBy = windowToKeepBy;
        this.description = description;
    }
    performAs(actor) {
        return this.windowToKeepBy(actor)
            .then(windowToKeep => this.windowsOtherThan(windowToKeep, actor)
            .then(windowsToClose => this.closeAll(windowsToClose, actor))
            .then(() => this.switchTo(windowToKeep, actor)));
    }
    toString() {
        return this.description;
    }
    /**
     * @param {string} windowToKeep
     * @param {UsesAbilities & AnswersQuestions} actor
     * @private
     */
    windowsOtherThan(windowToKeep, actor) {
        return abilities_1.BrowseTheWeb.as(actor).getAllWindowHandles()
            .then(allWindows => this.isDefined(windowToKeep) && allWindows.length > 1
            ? allWindows.filter(handle => handle !== windowToKeep)
            : []);
    }
    /**
     * @param {string[]} windows
     * @param {UsesAbilities & AnswersQuestions} actor
     * @private
     */
    closeAll(windows, actor) {
        return windows.reduce((previous, handle) => {
            return previous
                .then(() => abilities_1.BrowseTheWeb.as(actor).switchToWindow(handle))
                .then(() => abilities_1.BrowseTheWeb.as(actor).closeCurrentWindow());
        }, Promise.resolve());
    }
    /**
     * @param {string} window
     * @param {UsesAbilities & AnswersQuestions} actor
     * @private
     */
    switchTo(window, actor) {
        return this.isDefined(window)
            ? abilities_1.BrowseTheWeb.as(actor).switchToWindow(window)
            : Promise.resolve();
    }
    /**
     * @param {any} value
     * @private
     */
    isDefined(value) {
        return value !== undefined && value !== null;
    }
}
/**
 * @package
 */
class CloseCurrentWindow extends core_1.Interaction {
    performAs(actor) {
        return abilities_1.BrowseTheWeb.as(actor).closeCurrentWindow();
    }
    toString() {
        return `#actor closes current browser window`;
    }
}
//# sourceMappingURL=Close.js.map