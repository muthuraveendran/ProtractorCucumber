"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResultMapper = void 0;
const core_1 = require("@serenity-js/core");
const model_1 = require("@serenity-js/core/lib/model");
const errors_1 = require("../../../errors");
/**
 * @package
 */
class ResultMapper {
    outcomeFor(status, maybeError) {
        const error = this.errorFrom(maybeError);
        if (error && /timed out/.test(error.message)) {
            return new model_1.ExecutionFailedWithError(error);
        }
        switch (true) {
            case status === 'undefined':
                return new model_1.ImplementationPending(new core_1.ImplementationPendingError('Step not implemented'));
            case status === 'ambiguous':
                if (!error) {
                    // Only the step result contains the "ambiguous step def error", the scenario itself doesn't
                    return new model_1.ExecutionFailedWithError(new errors_1.AmbiguousStepDefinitionError('Multiple step definitions match'));
                }
                return new model_1.ExecutionFailedWithError(error);
            case status === 'failed':
                switch (true) {
                    case error instanceof core_1.AssertionError: return new model_1.ExecutionFailedWithAssertionError(error);
                    case error instanceof core_1.TestCompromisedError: return new model_1.ExecutionCompromised(error);
                    default: return new model_1.ExecutionFailedWithError(error);
                }
            case status === 'pending':
                return new model_1.ImplementationPending(new core_1.ImplementationPendingError('Step not implemented'));
            case status === 'passed':
                return new model_1.ExecutionSuccessful();
            case status === 'skipped':
                return new model_1.ExecutionSkipped();
        }
    }
    errorFrom(error) {
        switch (typeof error) {
            case 'string': return new Error(error);
            case 'object': return error;
            case 'function': return error;
            default: return void 0;
        }
    }
}
exports.ResultMapper = ResultMapper;
//# sourceMappingURL=ResultMapper.js.map