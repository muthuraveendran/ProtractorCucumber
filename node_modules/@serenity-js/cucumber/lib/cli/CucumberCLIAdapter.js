"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CucumberCLIAdapter = void 0;
/* eslint-disable unicorn/filename-case */
/* istanbul ignore file covered in integration tests */
const io_1 = require("@serenity-js/core/lib/io");
const model_1 = require("@serenity-js/core/lib/model");
const CucumberOptions_1 = require("./CucumberOptions");
/**
 * @desc
 *  Allows for programmatic execution of Cucumber test scenarios.
 *
 * @implements {@serenity-js/core/lib/io~TestRunnerAdapter}
 */
class CucumberCLIAdapter {
    /**
     * @param {@serenity-js/core/lib/io~Config<CucumberConfig>} config
     * @param {@serenity-js/core/lib/io~ModuleLoader} loader
     * @param {SerenityFormatterOutput} output
     *
     * @see {@link CucumberConfig}
     */
    constructor(config, loader, output) {
        this.loader = loader;
        this.output = output;
        this.options = new CucumberOptions_1.CucumberOptions(config);
    }
    /**
     * @desc
     *  Scenario success threshold for this test runner, calculated based on {@link CucumberConfig}
     *
     * @returns {Outcome | { Code: number }}
     */
    successThreshold() {
        return this.options.isStrict()
            ? model_1.ExecutionIgnored
            : model_1.ImplementationPending;
    }
    /**
     * @desc
     *  Instructs Cucumber to execute feature files located at `pathsToScenarios`
     *
     * @param {string[]} pathsToScenarios
     *  Absolute or relative paths to feature files
     *
     * @returns {Promise<void>}
     */
    async run(pathsToScenarios) {
        const version = this.loader.hasAvailable('@cucumber/cucumber')
            ? this.loader.versionOf('@cucumber/cucumber')
            : this.loader.versionOf('cucumber');
        const serenityListener = this.loader.resolve('@serenity-js/cucumber');
        return this.runScenarios(version, serenityListener, pathsToScenarios);
    }
    runScenarios(version, serenityListener, pathsToScenarios) {
        const argv = this.options.asArgumentsForCucumber(version);
        if (version.isAtLeast(new io_1.Version('7.0.0'))) {
            return this.runWithCucumber7(argv, serenityListener, pathsToScenarios);
        }
        if (version.isAtLeast(new io_1.Version('3.0.0'))) {
            return this.runWithCucumber3to6(argv, serenityListener, pathsToScenarios);
        }
        if (version.isAtLeast(new io_1.Version('2.0.0'))) {
            return this.runWithCucumber2(argv, serenityListener, pathsToScenarios);
        }
        return this.runWithCucumber0to1(argv, serenityListener, pathsToScenarios);
    }
    runWithCucumber7(argv, pathToSerenityListener, pathsToScenarios) {
        const cucumber = this.loader.require('@cucumber/cucumber');
        const output = this.output.get();
        return new cucumber.Cli({
            argv: argv.concat('--format', `${pathToSerenityListener}:${output.value()}`, ...pathsToScenarios),
            cwd: this.loader.cwd,
            stdout: process.stdout,
        })
            .run()
            .then(cleanUpAndPassThrough(output), cleanUpAndReThrow(output));
    }
    runWithCucumber3to6(argv, pathToSerenityListener, pathsToScenarios) {
        const cucumber = this.loader.require('cucumber');
        const output = this.output.get();
        return new cucumber.Cli({
            argv: argv.concat('--format', `${pathToSerenityListener}:${output.value()}`, ...pathsToScenarios),
            cwd: this.loader.cwd,
            stdout: process.stdout,
        })
            .run()
            .then(cleanUpAndPassThrough(output), cleanUpAndReThrow(output));
    }
    runWithCucumber2(argv, pathToSerenityListener, pathsToScenarios) {
        const cucumber = this.loader.require('cucumber');
        return new cucumber.Cli({
            argv: argv.concat('--require', pathToSerenityListener, ...pathsToScenarios),
            cwd: this.loader.cwd,
            stdout: process.stdout,
        }).run();
    }
    runWithCucumber0to1(argv, pathToSerenityListener, pathsToScenarios) {
        return new Promise((resolve, reject) => {
            this.loader.require('cucumber')
                .Cli(argv.concat('--require', pathToSerenityListener, ...pathsToScenarios))
                .run((wasSuccessful) => resolve());
        });
    }
}
exports.CucumberCLIAdapter = CucumberCLIAdapter;
/**
 * @private
 */
function cleanUpAndPassThrough(output) {
    return (result) => {
        return output.cleanUp()
            .then(() => result);
    };
}
/**
 * @private
 */
function cleanUpAndReThrow(output) {
    return (error) => {
        return output.cleanUp()
            .then(() => {
            throw error;
        }, ignoredError => {
            throw error;
        });
    };
}
//# sourceMappingURL=CucumberCLIAdapter.js.map