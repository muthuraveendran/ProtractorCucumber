import { ModuleLoader, TestRunnerAdapter } from '@serenity-js/core/lib/io';
import { Outcome } from '@serenity-js/core/lib/model';
import { CucumberConfig } from './CucumberConfig';
import { SerenityFormatterOutput } from './output';
/**
 * @desc
 *  Allows for programmatic execution of Cucumber test scenarios.
 *
 * @implements {@serenity-js/core/lib/io~TestRunnerAdapter}
 */
export declare class CucumberCLIAdapter implements TestRunnerAdapter {
    private readonly loader;
    private readonly output;
    private readonly options;
    /**
     * @param {@serenity-js/core/lib/io~Config<CucumberConfig>} config
     * @param {@serenity-js/core/lib/io~ModuleLoader} loader
     * @param {SerenityFormatterOutput} output
     *
     * @see {@link CucumberConfig}
     */
    constructor(config: CucumberConfig, loader: ModuleLoader, output: SerenityFormatterOutput);
    /**
     * @desc
     *  Scenario success threshold for this test runner, calculated based on {@link CucumberConfig}
     *
     * @returns {Outcome | { Code: number }}
     */
    successThreshold(): Outcome | {
        Code: number;
    };
    /**
     * @desc
     *  Instructs Cucumber to execute feature files located at `pathsToScenarios`
     *
     * @param {string[]} pathsToScenarios
     *  Absolute or relative paths to feature files
     *
     * @returns {Promise<void>}
     */
    run(pathsToScenarios: string[]): Promise<void>;
    private runScenarios;
    private runWithCucumber7;
    private runWithCucumber3to6;
    private runWithCucumber2;
    private runWithCucumber0to1;
}
