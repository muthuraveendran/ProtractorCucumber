"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.removeUserInfoFromUrl = exports.detectCI = void 0;
const os_1 = __importDefault(require("os"));
const url_1 = require("url");
const messages_1 = require("@cucumber/messages");
const ciDict_json_1 = __importDefault(require("./ciDict.json"));
function createMeta(toolName, toolVersion, envDict, ciDict) {
    if (ciDict === undefined) {
        ciDict = ciDict_json_1.default;
    }
    return new messages_1.messages.Meta({
        protocolVersion: messages_1.version,
        implementation: new messages_1.messages.Meta.Product({
            name: toolName,
            version: toolVersion,
        }),
        cpu: new messages_1.messages.Meta.Product({
            name: os_1.default.arch(),
        }),
        os: new messages_1.messages.Meta.Product({
            name: os_1.default.platform(),
            version: os_1.default.release(),
        }),
        runtime: new messages_1.messages.Meta.Product({
            name: 'node.js',
            version: process.versions.node,
        }),
        ci: detectCI(ciDict, envDict),
    });
}
exports.default = createMeta;
function detectCI(ciDict, envDict) {
    const detected = [];
    for (const [ciName, ciSystem] of Object.entries(ciDict)) {
        const ci = createCi(ciName, ciSystem, envDict);
        if (ci) {
            detected.push(ci);
        }
    }
    if (detected.length !== 1) {
        return undefined;
    }
    return detected[0];
}
exports.detectCI = detectCI;
function removeUserInfoFromUrl(value) {
    if (!value)
        return value;
    const url = url_1.parse(value);
    if (url.auth === null)
        return value;
    url.auth = null;
    return url_1.format(url);
}
exports.removeUserInfoFromUrl = removeUserInfoFromUrl;
function createCi(ciName, ciSystem, envDict) {
    const url = evaluate(ciSystem.url, envDict);
    if (url === undefined) {
        // The url is what consumers will use as the primary key for a build
        // If this cannot be determined, we return nothing.
        return undefined;
    }
    return messages_1.messages.Meta.CI.create({
        url,
        name: ciName,
        git: {
            remote: removeUserInfoFromUrl(evaluate(ciSystem.git.remote, envDict)),
            revision: evaluate(ciSystem.git.revision, envDict),
            branch: evaluate(ciSystem.git.branch, envDict),
            tag: evaluate(ciSystem.git.tag, envDict),
        },
    });
}
/**
 * Evaluates a simple template
 *
 * @param template - the template from the ciDict.json file
 * @param envDict - variables
 * @return the evaluated template, or undefined if a variable was undefined
 */
function evaluate(template, envDict) {
    if (template === undefined) {
        return undefined;
    }
    try {
        return template.replace(/\${((refbranch|reftag)\s+)?([^\s}]+)(\s+\|\s+([^}]+))?}/g, (substring, ...args) => {
            const func = args[1];
            const variable = args[2];
            const defaultValue = args[4];
            const value = envDict[variable] || defaultValue;
            if (value === undefined) {
                throw new Error(`Undefined variable: ${variable}`);
            }
            switch (func) {
                case 'refbranch':
                    return group1(value, /^refs\/heads\/(.*)/);
                case 'reftag':
                    return group1(value, /^refs\/tags\/(.*)/);
                default:
                    return value;
            }
        });
    }
    catch (err) {
        // There was an undefined variable
        return undefined;
    }
}
function group1(value, regexp) {
    const match = value.match(regexp);
    if (match === null)
        throw new Error('No match');
    return match[1];
}
//# sourceMappingURL=createMeta.js.map