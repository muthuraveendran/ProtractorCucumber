"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const gherkin_streams_1 = require("@cucumber/gherkin-streams");
const gherkin_utils_1 = require("@cucumber/gherkin-utils");
const messages_1 = require("@cucumber/messages");
const stream_1 = require("stream");
const assert_1 = __importDefault(require("assert"));
const fake_cucumber_1 = require("@cucumber/fake-cucumber");
const util_1 = require("util");
const Query_1 = __importDefault(require("../src/Query"));
const pipelinePromise = util_1.promisify(stream_1.pipeline);
describe('Query', () => {
    let gherkinQuery;
    let cucumberQuery;
    beforeEach(() => {
        gherkinQuery = new gherkin_utils_1.Query();
        cucumberQuery = new Query_1.default();
    });
    describe('#getWorstTestStepResult(testStepResults)', () => {
        it('returns a FAILED result for PASSED,FAILED,PASSED', () => {
            const result = cucumberQuery.getWorstTestStepResult([
                new messages_1.messages.TestStepFinished.TestStepResult({
                    status: messages_1.messages.TestStepFinished.TestStepResult.Status.PASSED,
                }),
                new messages_1.messages.TestStepFinished.TestStepResult({
                    status: messages_1.messages.TestStepFinished.TestStepResult.Status.FAILED,
                }),
                new messages_1.messages.TestStepFinished.TestStepResult({
                    status: messages_1.messages.TestStepFinished.TestStepResult.Status.PASSED,
                }),
            ]);
            assert_1.default.strictEqual(result.status, messages_1.messages.TestStepFinished.TestStepResult.Status.FAILED);
        });
    });
    describe('#getPickleStepTestStepResults(pickleStepIds)', () => {
        it('returns a single UNKNOWN when the list is empty', () => {
            const results = cucumberQuery.getPickleTestStepResults([]);
            assert_1.default.deepStrictEqual(results.map((r) => r.status), [messages_1.messages.TestStepFinished.TestStepResult.Status.UNKNOWN]);
        });
        it('looks up results for scenario steps', () => __awaiter(void 0, void 0, void 0, function* () {
            const envelopes = [];
            yield execute(`Feature: hello
  Scenario: ok
    Given a passed step
`, (envelope) => envelopes.push(envelope));
            const scenario = findScenario(envelopes);
            const pickleStepIds = gherkinQuery.getPickleStepIds(scenario.steps[0].id);
            assert_1.default.strictEqual(pickleStepIds.length, 1);
            const testStepResults = cucumberQuery.getPickleStepTestStepResults(pickleStepIds);
            assert_1.default.strictEqual(testStepResults.length, 1);
            assert_1.default.strictEqual(testStepResults[0].status, messages_1.messages.TestStepFinished.TestStepResult.Status.PASSED);
        }));
        it('looks up results for background steps', () => __awaiter(void 0, void 0, void 0, function* () {
            const envelopes = [];
            yield execute(`Feature: hello
  Background:
    Given a passed step

  Scenario: ok
    Given a passed step

  Scenario: ko
    Given a failed step
`, (envelope) => envelopes.push(envelope));
            const background = findBackground(envelopes);
            const pickleStepIds = gherkinQuery.getPickleStepIds(background.steps[0].id);
            assert_1.default.strictEqual(pickleStepIds.length, 2);
            const testStepResults = cucumberQuery.getPickleStepTestStepResults(pickleStepIds);
            assert_1.default.deepStrictEqual(testStepResults.map((r) => r.status), [
                messages_1.messages.TestStepFinished.TestStepResult.Status.PASSED,
                messages_1.messages.TestStepFinished.TestStepResult.Status.PASSED,
            ]);
        }));
        it('looks up results for background steps when scenarios are empty', () => __awaiter(void 0, void 0, void 0, function* () {
            const envelopes = [];
            yield execute(`Feature: hello
  Background:
  Given a passed step

  Scenario: ok

  Scenario: ok too
`, (envelope) => envelopes.push(envelope));
            const background = findBackground(envelopes);
            const pickleStepIds = gherkinQuery.getPickleStepIds(background.steps[0].id);
            assert_1.default.strictEqual(pickleStepIds.length, 0);
            const testStepResults = cucumberQuery.getPickleStepTestStepResults(pickleStepIds);
            assert_1.default.strictEqual(testStepResults.length, 1);
            assert_1.default.strictEqual(testStepResults[0].status, messages_1.messages.TestStepFinished.TestStepResult.Status.UNKNOWN);
        }));
    });
    describe('#getPickleTestStepResults(pickleIds)', () => {
        it('looks up results for scenarios', () => __awaiter(void 0, void 0, void 0, function* () {
            const envelopes = [];
            yield execute(`Feature: hello
  Scenario: ko
    Given a passed step
    Given a failed step
`, (envelope) => envelopes.push(envelope));
            const scenario = findScenario(envelopes);
            const pickleIds = gherkinQuery.getPickleIds('test.feature', scenario.id);
            assert_1.default.strictEqual(pickleIds.length, 1);
            const testStepResults = cucumberQuery.getPickleTestStepResults(pickleIds);
            assert_1.default.deepStrictEqual(testStepResults.map((r) => r.status), [
                messages_1.messages.TestStepFinished.TestStepResult.Status.PASSED,
                messages_1.messages.TestStepFinished.TestStepResult.Status.FAILED,
            ]);
        }));
        it('looks up results for scenario outlines', () => __awaiter(void 0, void 0, void 0, function* () {
            const envelopes = [];
            yield execute(`Feature: hello
  Scenario: hi <status1> and <status2>
    Given a <status1> step
    And a <status2> step

    Examples:
      | status1    | status2 |
      | passed     | passed  |
      | passed     | failed  |
`, (envelope) => envelopes.push(envelope));
            const scenario = findScenario(envelopes);
            const pickleIds = gherkinQuery.getPickleIds('test.feature', scenario.id);
            assert_1.default.strictEqual(pickleIds.length, 2);
            assert_1.default.deepStrictEqual(cucumberQuery.getPickleTestStepResults(pickleIds).map((r) => r.status), [
                messages_1.messages.TestStepFinished.TestStepResult.Status.PASSED,
                messages_1.messages.TestStepFinished.TestStepResult.Status.PASSED,
                messages_1.messages.TestStepFinished.TestStepResult.Status.PASSED,
                messages_1.messages.TestStepFinished.TestStepResult.Status.FAILED,
            ]);
        }));
        it('looks up results for examples rows outlines', () => __awaiter(void 0, void 0, void 0, function* () {
            const envelopes = [];
            yield execute(`Feature: hello
  Scenario: hi <status1> and <status2>
    Given a <status1> step
    And a <status2> step

    Examples:
      | status1    | status2 |
      | passed     | passed  |
      | passed     | failed  |
`, (envelope) => envelopes.push(envelope));
            const scenario = findScenario(envelopes);
            const exampleIds = scenario.examples[0].tableBody.map((row) => row.id);
            assert_1.default.deepStrictEqual(cucumberQuery
                .getPickleTestStepResults(gherkinQuery.getPickleIds('test.feature', exampleIds[0]))
                .map((r) => r.status), [
                messages_1.messages.TestStepFinished.TestStepResult.Status.PASSED,
                messages_1.messages.TestStepFinished.TestStepResult.Status.PASSED,
            ]);
            assert_1.default.deepStrictEqual(cucumberQuery
                .getPickleTestStepResults(gherkinQuery.getPickleIds('test.feature', exampleIds[1]))
                .map((r) => r.status), [
                messages_1.messages.TestStepFinished.TestStepResult.Status.PASSED,
                messages_1.messages.TestStepFinished.TestStepResult.Status.FAILED,
            ]);
        }));
    });
    describe('#getPickleStepAttachments(pickleIds)', () => {
        it('looks up attachments', () => __awaiter(void 0, void 0, void 0, function* () {
            const envelopes = [];
            yield execute(`Feature: hello
  Scenario: ok
    Given a passed step with attachment
    `, (envelope) => envelopes.push(envelope));
            const scenario = findScenario(envelopes);
            const pickleStepIds = gherkinQuery.getPickleStepIds(scenario.steps[0].id);
            assert_1.default.strictEqual(pickleStepIds.length, 1);
            const attachments = cucumberQuery.getPickleStepAttachments(pickleStepIds);
            assert_1.default.strictEqual(attachments.length, 1);
            assert_1.default.strictEqual(attachments[0].body, 'Hello');
        }));
    });
    describe('#getStepMatchArguments(uri, lineNumber)', () => {
        it("looks up result for step's uri and line", () => __awaiter(void 0, void 0, void 0, function* () {
            const envelopes = [];
            yield execute(`Feature: hello
  Scenario: ok
    Given a passed step
    And I have 567 cukes in my belly
    `, (envelope) => envelopes.push(envelope));
            const scenario = findScenario(envelopes);
            assert_1.default.deepStrictEqual(cucumberQuery
                .getStepMatchArgumentsLists(gherkinQuery.getPickleStepIds(scenario.steps[0].id)[0])
                .map((sal) => sal.stepMatchArguments.map((arg) => arg.parameterTypeName)), [[]]);
            assert_1.default.deepStrictEqual(cucumberQuery
                .getStepMatchArgumentsLists(gherkinQuery.getPickleStepIds(scenario.steps[1].id)[0])
                .map((sal) => sal.stepMatchArguments.map((arg) => arg.parameterTypeName)), [['int', 'word']]);
        }));
        describe('#getBeforeHookSteps(pickleId: string)', () => {
            it('returns an empty list when there is no hooks', () => __awaiter(void 0, void 0, void 0, function* () {
                const envelopes = [];
                yield execute(`Feature: hello
    Scenario: hi
      Given a passed step
  `, (envelope) => envelopes.push(envelope));
                const scenarioId = findScenario(envelopes).id;
                const pickleId = gherkinQuery.getPickleIds('test.feature', scenarioId)[0];
                assert_1.default.deepStrictEqual(cucumberQuery.getBeforeHookSteps(pickleId), []);
            }));
            it('returns one before hook step', () => __awaiter(void 0, void 0, void 0, function* () {
                const envelopes = [];
                yield execute(`Feature: hello
    @beforeHook
    Scenario: hi
      Given a passed step
  `, (envelope) => envelopes.push(envelope));
                const scenarioId = findScenario(envelopes).id;
                const pickleId = gherkinQuery.getPickleIds('test.feature', scenarioId)[0];
                assert_1.default.strictEqual(cucumberQuery.getBeforeHookSteps(pickleId).length, 1);
            }));
            it('does not return after hook steps', () => __awaiter(void 0, void 0, void 0, function* () {
                const envelopes = [];
                yield execute(`Feature: hello
    @afterHook
    Scenario: hi
      Given a passed step
  `, (envelope) => envelopes.push(envelope));
                const scenarioId = findScenario(envelopes).id;
                const pickleId = gherkinQuery.getPickleIds('test.feature', scenarioId)[0];
                assert_1.default.deepStrictEqual(cucumberQuery.getBeforeHookSteps(pickleId), []);
            }));
        });
        describe('#getAfterHookSteps(pickleId: string)', () => {
            it('returns an empty list when there is no hooks', () => __awaiter(void 0, void 0, void 0, function* () {
                const envelopes = [];
                yield execute(`Feature: hello
    Scenario: hi
      Given a passed step
  `, (envelope) => envelopes.push(envelope));
                const scenarioId = findScenario(envelopes).id;
                const pickleId = gherkinQuery.getPickleIds('test.feature', scenarioId)[0];
                assert_1.default.deepStrictEqual(cucumberQuery.getAfterHookSteps(pickleId), []);
            }));
            it('returns one after hook step', () => __awaiter(void 0, void 0, void 0, function* () {
                const envelopes = [];
                yield execute(`Feature: hello
    @afterHook
    Scenario: hi
      Given a passed step
  `, (envelope) => envelopes.push(envelope));
                const scenarioId = findScenario(envelopes).id;
                const pickleId = gherkinQuery.getPickleIds('test.feature', scenarioId)[0];
                assert_1.default.strictEqual(cucumberQuery.getAfterHookSteps(pickleId).length, 1);
            }));
            it('does not return before hook steps', () => __awaiter(void 0, void 0, void 0, function* () {
                const envelopes = [];
                yield execute(`Feature: hello
    @beforeHook
    Scenario: hi
      Given a passed step
  `, (envelope) => envelopes.push(envelope));
                const scenarioId = findScenario(envelopes).id;
                const pickleId = gherkinQuery.getPickleIds('test.feature', scenarioId)[0];
                assert_1.default.deepStrictEqual(cucumberQuery.getAfterHookSteps(pickleId), []);
            }));
        });
        describe('#getTestStepResult', () => {
            it('returns one test step result', () => __awaiter(void 0, void 0, void 0, function* () {
                const emittedMessages = [];
                yield execute(`Feature: hello
    Scenario: hi
      Given a passed step
  `, (message) => emittedMessages.push(message));
                const testCase = emittedMessages.find((child) => child.testCase).testCase;
                const testStep = testCase.testSteps[0];
                const results = cucumberQuery.getTestStepResults(testStep.id);
                assert_1.default.deepStrictEqual(results.length, 1);
                assert_1.default.deepStrictEqual(results[0].status, messages_1.messages.TestStepFinished.TestStepResult.Status.PASSED);
            }));
            it('returns a result for hook step', () => __awaiter(void 0, void 0, void 0, function* () {
                const emittedMessages = [];
                yield execute(`Feature: hello
    @beforeHook
    Scenario: hi
      Given a passed step
  `, (message) => emittedMessages.push(message));
                const testCase = emittedMessages.find((child) => child.testCase).testCase;
                const testStep = testCase.testSteps[0];
                const results = cucumberQuery.getTestStepResults(testStep.id);
                assert_1.default.deepStrictEqual(results.length, 1);
                assert_1.default.deepStrictEqual(results[0].status, messages_1.messages.TestStepFinished.TestStepResult.Status.PASSED);
            }));
        });
        describe('#getHook(HookId)', () => {
            it('returns undefined if the id does not match any hook', () => {
                assert_1.default.strictEqual(cucumberQuery.getHook('tralala'), undefined);
            });
            it('returns the matching hook', () => {
                const hook = messages_1.messages.Hook.create({
                    id: 'tralala',
                });
                const envelope = messages_1.messages.Envelope.create({
                    hook,
                });
                cucumberQuery.update(envelope);
                assert_1.default.deepStrictEqual(cucumberQuery.getHook('tralala'), hook);
            });
        });
        describe('#getAttachmentByTestStepId', () => {
            it('looks up attachments', () => __awaiter(void 0, void 0, void 0, function* () {
                const testCases = [];
                yield execute(`Feature: hello
    Scenario: ok
      Given a passed step with attachment
  `, (envelope) => {
                    if (envelope.testCase) {
                        testCases.push(envelope.testCase);
                    }
                });
                const attachments = cucumberQuery.getTestStepsAttachments([testCases[0].testSteps[0].id]);
                assert_1.default.strictEqual(attachments.length, 1);
                assert_1.default.strictEqual(attachments[0].body, 'Hello');
            }));
        });
    });
    function execute(gherkinSource, messagesHandler = () => null) {
        return __awaiter(this, void 0, void 0, function* () {
            const newId = messages_1.IdGenerator.incrementing();
            const clock = new fake_cucumber_1.IncrementClock();
            const stopwatch = new fake_cucumber_1.IncrementStopwatch();
            const makeErrorMessage = fake_cucumber_1.withFullStackTrace();
            const supportCode = new fake_cucumber_1.SupportCode(newId, clock, stopwatch, makeErrorMessage);
            supportCode.defineBeforeHook(null, '@beforeHook', () => {
                // no-op
            });
            supportCode.defineAfterHook(null, '@afterHook', () => {
                // no-op
            });
            supportCode.defineStepDefinition(null, 'a passed step', () => {
                // no-op
            });
            supportCode.defineStepDefinition(null, 'a passed step with attachment', function () {
                this.attach('Hello', 'text/plain');
            });
            supportCode.defineStepDefinition(null, 'a failed step', () => {
                throw new Error(`This step failed.`);
            });
            supportCode.defineStepDefinition(null, 'I have {int} cukes in my {word}', (cukes) => {
                assert_1.default.ok(cukes);
            });
            const queryUpdateStream = new stream_1.Writable({
                objectMode: true,
                write(envelope, encoding, callback) {
                    try {
                        messagesHandler(envelope);
                        gherkinQuery.update(envelope);
                        cucumberQuery.update(envelope);
                        callback();
                    }
                    catch (err) {
                        callback(err);
                    }
                },
            });
            yield pipelinePromise(gherkinMessages(gherkinSource, 'test.feature', newId), queryUpdateStream);
            const testPlan = fake_cucumber_1.makeTestPlan(gherkinQuery, supportCode, fake_cucumber_1.makeTestCase);
            yield testPlan.execute((envelope) => {
                messagesHandler(envelope);
                cucumberQuery.update(envelope);
            });
        });
    }
    function gherkinMessages(gherkinSource, uri, newId) {
        const source = messages_1.messages.Envelope.fromObject({
            source: {
                uri,
                data: gherkinSource,
                mediaType: 'text/x.cucumber.gherkin+plain',
            },
        });
        return gherkin_streams_1.GherkinStreams.fromSources([source], { newId });
    }
    function findScenario(envelopes) {
        const gherkinDocument = envelopes.find((envelope) => envelope.gherkinDocument).gherkinDocument;
        return gherkinDocument.feature.children.find((child) => child.scenario).scenario;
    }
    function findBackground(envelopes) {
        const gherkinDocument = envelopes.find((envelope) => envelope.gherkinDocument).gherkinDocument;
        return gherkinDocument.feature.children.find((child) => child.background).background;
    }
});
//# sourceMappingURL=QueryTest.js.map