import AstNode from './AstNode';
import { IdGenerator, messages } from '@cucumber/messages';
import { RuleType, TokenType } from './Parser';
import IToken from './IToken';
import { IAstBuilder } from './IAstBuilder';
export default class AstBuilder implements IAstBuilder<AstNode, TokenType, RuleType> {
    stack: AstNode[];
    comments: messages.GherkinDocument.IComment[];
    readonly newId: IdGenerator.NewId;
    constructor(newId: IdGenerator.NewId);
    reset(): void;
    startRule(ruleType: RuleType): void;
    endRule(): void;
    build(token: IToken<TokenType>): void;
    getResult(): any;
    currentNode(): AstNode;
    getLocation(token: IToken<TokenType>, column?: number): messages.ILocation;
    getTags(node: AstNode): messages.GherkinDocument.Feature.ITag[];
    getCells(tableRowToken: IToken<TokenType>): messages.GherkinDocument.Feature.TableRow.TableCell[];
    getDescription(node: AstNode): any;
    getSteps(node: AstNode): any[];
    getTableRows(node: AstNode): messages.GherkinDocument.Feature.TableRow[];
    ensureCellCount(rows: messages.GherkinDocument.Feature.TableRow[]): void;
    transformNode(node: AstNode): string | AstNode | messages.GherkinDocument | messages.GherkinDocument.Feature | messages.GherkinDocument.Feature.TableRow[] | messages.GherkinDocument.Feature.Step | messages.GherkinDocument.Feature.Step.DocString | messages.GherkinDocument.Feature.Step.DataTable | messages.GherkinDocument.Feature.Background | messages.GherkinDocument.Feature.Scenario | messages.GherkinDocument.Feature.Scenario.Examples | messages.GherkinDocument.Feature.FeatureChild.Rule;
}
//# sourceMappingURL=AstBuilder.d.ts.map