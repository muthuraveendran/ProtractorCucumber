"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Parser_1 = __importDefault(require("./Parser"));
const TokenMatcher_1 = __importDefault(require("./TokenMatcher"));
const messages_1 = require("@cucumber/messages");
const compile_1 = __importDefault(require("./pickles/compile"));
const AstBuilder_1 = __importDefault(require("./AstBuilder"));
const makeSourceEnvelope_1 = __importDefault(require("./makeSourceEnvelope"));
function generateMessages(data, uri, options) {
    const result = [];
    try {
        if (options.includeSource) {
            result.push(makeSourceEnvelope_1.default(data, uri));
        }
        if (!options.includeGherkinDocument && !options.includePickles) {
            return result;
        }
        const parser = new Parser_1.default(new AstBuilder_1.default(options.newId), new TokenMatcher_1.default(options.defaultDialect));
        parser.stopAtFirstError = false;
        const gherkinDocument = parser.parse(data);
        if (options.includeGherkinDocument) {
            result.push(messages_1.messages.Envelope.create({
                gherkinDocument: Object.assign(Object.assign({}, gherkinDocument), { uri }),
            }));
        }
        if (options.includePickles) {
            const pickles = compile_1.default(gherkinDocument, uri, options.newId);
            for (const pickle of pickles) {
                result.push(messages_1.messages.Envelope.create({
                    pickle,
                }));
            }
        }
    }
    catch (err) {
        const errors = err.errors || [err];
        for (const error of errors) {
            if (!error.location) {
                // It wasn't a parser error - throw it (this is unexpected)
                throw error;
            }
            result.push(messages_1.messages.Envelope.create({
                parseError: {
                    source: {
                        uri,
                        location: {
                            line: error.location.line,
                            column: error.location.column,
                        },
                    },
                    message: error.message,
                },
            }));
        }
    }
    return result;
}
exports.default = generateMessages;
//# sourceMappingURL=generateMessages.js.map