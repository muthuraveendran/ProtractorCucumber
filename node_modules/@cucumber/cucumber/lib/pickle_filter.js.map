{"version":3,"file":"pickle_filter.js","sourceRoot":"","sources":["../src/pickle_filter.ts"],"names":[],"mappings":"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","sourcesContent":["import _, { Dictionary } from 'lodash'\nimport path from 'path'\nimport parse from '@cucumber/tag-expressions'\nimport { getGherkinScenarioLocationMap } from './formatter/helpers/gherkin_document_parser'\nimport { doesHaveValue, doesNotHaveValue } from './value_checker'\nimport { messages } from '@cucumber/messages'\nimport IGherkinDocument = messages.IGherkinDocument\nimport IPickle = messages.IPickle\n\nconst FEATURE_LINENUM_REGEXP = /^(.*?)((?::[\\d]+)+)?$/\n\nexport interface IPickleFilterOptions {\n  cwd: string\n  featurePaths?: string[]\n  names?: string[]\n  tagExpression?: string\n}\n\nexport interface IMatchesAnyLineRequest {\n  gherkinDocument: messages.IGherkinDocument\n  pickle: messages.IPickle\n}\n\nexport default class PickleFilter {\n  private readonly lineFilter: PickleLineFilter\n  private readonly nameFilter: PickleNameFilter\n  private readonly tagFilter: PickleTagFilter\n\n  constructor({\n    cwd,\n    featurePaths,\n    names,\n    tagExpression,\n  }: IPickleFilterOptions) {\n    this.lineFilter = new PickleLineFilter(cwd, featurePaths)\n    this.nameFilter = new PickleNameFilter(names)\n    this.tagFilter = new PickleTagFilter(tagExpression)\n  }\n\n  matches({\n    gherkinDocument,\n    pickle,\n  }: {\n    gherkinDocument: IGherkinDocument\n    pickle: IPickle\n  }): boolean {\n    return (\n      this.lineFilter.matchesAnyLine({ gherkinDocument, pickle }) &&\n      this.nameFilter.matchesAnyName(pickle) &&\n      this.tagFilter.matchesAllTagExpressions(pickle)\n    )\n  }\n}\n\nexport class PickleLineFilter {\n  private readonly featureUriToLinesMapping: Dictionary<number[]>\n\n  constructor(cwd: string, featurePaths: string[] = []) {\n    this.featureUriToLinesMapping = this.getFeatureUriToLinesMapping({\n      cwd,\n      featurePaths,\n    })\n  }\n\n  getFeatureUriToLinesMapping({\n    cwd,\n    featurePaths,\n  }: {\n    cwd: string\n    featurePaths: string[]\n  }): Dictionary<number[]> {\n    const mapping: Dictionary<number[]> = {}\n    featurePaths.forEach((featurePath) => {\n      const match = FEATURE_LINENUM_REGEXP.exec(featurePath)\n      if (doesHaveValue(match)) {\n        const uri = path.resolve(cwd, match[1])\n        const linesExpression = match[2]\n        if (doesHaveValue(linesExpression)) {\n          if (doesNotHaveValue(mapping[uri])) {\n            mapping[uri] = []\n          }\n          linesExpression\n            .slice(1)\n            .split(':')\n            .forEach((line) => {\n              mapping[uri].push(parseInt(line))\n            })\n        }\n      }\n    })\n    return mapping\n  }\n\n  matchesAnyLine({ gherkinDocument, pickle }: IMatchesAnyLineRequest): boolean {\n    const linesToMatch = this.featureUriToLinesMapping[pickle.uri]\n    if (doesHaveValue(linesToMatch)) {\n      const gherkinScenarioLocationMap = getGherkinScenarioLocationMap(\n        gherkinDocument\n      )\n      const pickleLines = pickle.astNodeIds.map(\n        (sourceId) => gherkinScenarioLocationMap[sourceId].line\n      )\n      return _.size(_.intersection(linesToMatch, pickleLines)) > 0\n    }\n    return true\n  }\n}\n\nexport class PickleNameFilter {\n  private readonly names: string[]\n\n  constructor(names: string[] = []) {\n    this.names = names\n  }\n\n  matchesAnyName(pickle: messages.IPickle): boolean {\n    if (this.names.length === 0) {\n      return true\n    }\n    return _.some(this.names, (name) => pickle.name.match(name))\n  }\n}\n\nexport class PickleTagFilter {\n  private readonly tagExpressionNode: any // cucumber-tag-expressions does not export interface\n\n  constructor(tagExpression: string) {\n    if (doesHaveValue(tagExpression) && tagExpression !== '') {\n      this.tagExpressionNode = parse(tagExpression)\n    }\n  }\n\n  matchesAllTagExpressions(pickle: messages.IPickle): boolean {\n    if (doesNotHaveValue(this.tagExpressionNode)) {\n      return true\n    }\n    return this.tagExpressionNode.evaluate(_.map(pickle.tags, 'name'))\n  }\n}\n"]}