{"version":3,"file":"coordinator.js","sourceRoot":"","sources":["../../../src/runtime/parallel/coordinator.ts"],"names":[],"mappings":"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","sourcesContent":["import _, { Dictionary } from 'lodash'\nimport { ChildProcess, fork } from 'child_process'\nimport path from 'path'\nimport Status from '../../status'\nimport { retriesForPickle } from '../helpers'\nimport { messages } from '@cucumber/messages'\nimport { EventEmitter } from 'events'\nimport { EventDataCollector } from '../../formatter/helpers'\nimport { IRuntimeOptions } from '..'\nimport { ISupportCodeLibrary } from '../../support_code_library_builder/types'\nimport {\n  ICoordinatorReport,\n  ICoordinatorReportSupportCodeIds,\n  IWorkerCommand,\n} from './command_types'\nimport { doesHaveValue } from '../../value_checker'\nimport {\n  ITestRunStopwatch,\n  PredictableTestRunStopwatch,\n  RealTestRunStopwatch,\n} from '../stopwatch'\n\nconst runWorkerPath = path.resolve(__dirname, 'run_worker.js')\n\nexport interface INewCoordinatorOptions {\n  cwd: string\n  eventBroadcaster: EventEmitter\n  eventDataCollector: EventDataCollector\n  options: IRuntimeOptions\n  pickleIds: string[]\n  supportCodeLibrary: ISupportCodeLibrary\n  supportCodePaths: string[]\n  supportCodeRequiredModules: string[]\n}\n\ninterface IWorker {\n  closed: boolean\n  process: ChildProcess\n}\n\nexport default class Coordinator {\n  private readonly cwd: string\n  private readonly eventBroadcaster: EventEmitter\n  private readonly eventDataCollector: EventDataCollector\n  private readonly stopwatch: ITestRunStopwatch\n  private onFinish: (success: boolean) => void\n  private nextPickleIdIndex: number\n  private readonly options: IRuntimeOptions\n  private readonly pickleIds: string[]\n  private workers: Dictionary<IWorker>\n  private supportCodeIdMap: Dictionary<string>\n  private readonly supportCodeLibrary: ISupportCodeLibrary\n  private readonly supportCodePaths: string[]\n  private readonly supportCodeRequiredModules: string[]\n  private success: boolean\n\n  constructor({\n    cwd,\n    eventBroadcaster,\n    eventDataCollector,\n    pickleIds,\n    options,\n    supportCodeLibrary,\n    supportCodePaths,\n    supportCodeRequiredModules,\n  }: INewCoordinatorOptions) {\n    this.cwd = cwd\n    this.eventBroadcaster = eventBroadcaster\n    this.eventDataCollector = eventDataCollector\n    this.stopwatch = options.predictableIds\n      ? new PredictableTestRunStopwatch()\n      : new RealTestRunStopwatch()\n    this.options = options\n    this.supportCodeLibrary = supportCodeLibrary\n    this.supportCodePaths = supportCodePaths\n    this.supportCodeRequiredModules = supportCodeRequiredModules\n    this.pickleIds = pickleIds\n    this.nextPickleIdIndex = 0\n    this.success = true\n    this.workers = {}\n    this.supportCodeIdMap = {}\n  }\n\n  parseWorkerMessage(worker: IWorker, message: ICoordinatorReport): void {\n    if (doesHaveValue(message.supportCodeIds)) {\n      this.saveDefinitionIdMapping(message.supportCodeIds)\n    } else if (message.ready) {\n      this.giveWork(worker)\n    } else if (doesHaveValue(message.jsonEnvelope)) {\n      const envelope = messages.Envelope.fromObject(\n        JSON.parse(message.jsonEnvelope)\n      )\n      this.eventBroadcaster.emit('envelope', envelope)\n      if (doesHaveValue(envelope.testCase)) {\n        this.remapDefinitionIds(envelope.testCase)\n      }\n      if (doesHaveValue(envelope.testCaseFinished)) {\n        this.parseTestCaseResult(envelope.testCaseFinished)\n      }\n    } else {\n      throw new Error(\n        `Unexpected message from worker: ${JSON.stringify(message)}`\n      )\n    }\n  }\n\n  saveDefinitionIdMapping(message: ICoordinatorReportSupportCodeIds): void {\n    _.each(message.stepDefinitionIds, (id: string, index: number) => {\n      this.supportCodeIdMap[id] = this.supportCodeLibrary.stepDefinitions[\n        index\n      ].id\n    })\n    _.each(\n      message.beforeTestCaseHookDefinitionIds,\n      (id: string, index: number) => {\n        this.supportCodeIdMap[\n          id\n        ] = this.supportCodeLibrary.beforeTestCaseHookDefinitions[index].id\n      }\n    )\n    _.each(\n      message.afterTestCaseHookDefinitionIds,\n      (id: string, index: number) => {\n        this.supportCodeIdMap[\n          id\n        ] = this.supportCodeLibrary.afterTestCaseHookDefinitions[index].id\n      }\n    )\n  }\n\n  remapDefinitionIds(testCase: messages.ITestCase): void {\n    for (const testStep of testCase.testSteps) {\n      if (testStep.hookId !== '') {\n        testStep.hookId = this.supportCodeIdMap[testStep.hookId]\n      }\n      if (doesHaveValue(testStep.stepDefinitionIds)) {\n        testStep.stepDefinitionIds = testStep.stepDefinitionIds.map(\n          (id) => this.supportCodeIdMap[id]\n        )\n      }\n    }\n  }\n\n  startWorker(id: string, total: number): void {\n    const workerProcess = fork(runWorkerPath, [], {\n      cwd: this.cwd,\n      env: _.assign({}, process.env, {\n        CUCUMBER_PARALLEL: 'true',\n        CUCUMBER_TOTAL_WORKERS: total,\n        CUCUMBER_WORKER_ID: id,\n      }),\n      stdio: ['inherit', 'inherit', 'inherit', 'ipc'],\n    })\n    const worker = { closed: false, process: workerProcess }\n    this.workers[id] = worker\n    worker.process.on('message', (message: ICoordinatorReport) => {\n      this.parseWorkerMessage(worker, message)\n    })\n    worker.process.on('close', (exitCode) => {\n      worker.closed = true\n      this.onWorkerProcessClose(exitCode)\n    })\n    const initializeCommand: IWorkerCommand = {\n      initialize: {\n        filterStacktraces: this.options.filterStacktraces,\n        supportCodePaths: this.supportCodePaths,\n        supportCodeRequiredModules: this.supportCodeRequiredModules,\n        options: this.options,\n      },\n    }\n    worker.process.send(initializeCommand)\n  }\n\n  onWorkerProcessClose(exitCode: number): void {\n    if (exitCode !== 0) {\n      this.success = false\n    }\n    if (_.every(this.workers, 'closed')) {\n      this.eventBroadcaster.emit(\n        'envelope',\n        messages.Envelope.fromObject({\n          testRunFinished: {\n            timestamp: this.stopwatch.timestamp(),\n          },\n        })\n      )\n      this.onFinish(this.success)\n    }\n  }\n\n  parseTestCaseResult(testCaseFinished: messages.ITestCaseFinished): void {\n    const { worstTestStepResult } = this.eventDataCollector.getTestCaseAttempt(\n      testCaseFinished.testCaseStartedId\n    )\n    if (\n      !worstTestStepResult.willBeRetried &&\n      this.shouldCauseFailure(worstTestStepResult.status)\n    ) {\n      this.success = false\n    }\n  }\n\n  run(numberOfWorkers: number, done: (success: boolean) => void): void {\n    this.eventBroadcaster.emit(\n      'envelope',\n      new messages.Envelope({\n        testRunStarted: {\n          timestamp: this.stopwatch.timestamp(),\n        },\n      })\n    )\n    this.stopwatch.start()\n    _.times(numberOfWorkers, (id) =>\n      this.startWorker(id.toString(), numberOfWorkers)\n    )\n    this.onFinish = done\n  }\n\n  giveWork(worker: IWorker): void {\n    if (this.nextPickleIdIndex === this.pickleIds.length) {\n      const finalizeCommand: IWorkerCommand = { finalize: true }\n      worker.process.send(finalizeCommand)\n      return\n    }\n    const pickleId = this.pickleIds[this.nextPickleIdIndex]\n    this.nextPickleIdIndex += 1\n    const pickle = this.eventDataCollector.getPickle(pickleId)\n    const gherkinDocument = this.eventDataCollector.getGherkinDocument(\n      pickle.uri\n    )\n    const retries = retriesForPickle(pickle, this.options)\n    const skip = this.options.dryRun || (this.options.failFast && !this.success)\n    const runCommand: IWorkerCommand = {\n      run: {\n        retries,\n        skip,\n        elapsed: this.stopwatch.duration().nanos(),\n        pickle,\n        gherkinDocument,\n      },\n    }\n    worker.process.send(runCommand)\n  }\n\n  shouldCauseFailure(\n    status: messages.TestStepFinished.TestStepResult.Status\n  ): boolean {\n    return (\n      _.includes([Status.AMBIGUOUS, Status.FAILED, Status.UNDEFINED], status) ||\n      (status === Status.PENDING && this.options.strict)\n    )\n  }\n}\n"]}