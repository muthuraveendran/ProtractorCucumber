{"version":3,"file":"pickle_runner.js","sourceRoot":"","sources":["../../src/runtime/pickle_runner.ts"],"names":[],"mappings":"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","sourcesContent":["import { clone } from 'lodash'\nimport { getAmbiguousStepException } from './helpers'\nimport AttachmentManager from './attachment_manager'\nimport StepRunner from './step_runner'\nimport { IdGenerator, messages } from '@cucumber/messages'\nimport { addDurations, getZeroDuration } from '../time'\nimport { EventEmitter } from 'events'\nimport {\n  ISupportCodeLibrary,\n  ITestCaseHookParameter,\n  ITestStepHookParameter,\n} from '../support_code_library_builder/types'\nimport TestCaseHookDefinition from '../models/test_case_hook_definition'\nimport TestStepHookDefinition from '../models/test_step_hook_definition'\nimport StepDefinition from '../models/step_definition'\nimport { IDefinition } from '../models/definition'\nimport { doesHaveValue, doesNotHaveValue } from '../value_checker'\nimport { ITestRunStopwatch } from './stopwatch'\nimport { Group } from '@cucumber/cucumber-expressions'\nimport { Query } from '@cucumber/query'\n\nconst { Status } = messages.TestStepFinished.TestStepResult\n\ninterface ITestStep {\n  id: string\n  isBeforeHook?: boolean\n  isHook: boolean\n  hookDefinition?: TestCaseHookDefinition\n  stepHookDefinition?: TestStepHookDefinition\n  pickleStep?: messages.Pickle.IPickleStep\n  stepDefinitions?: StepDefinition[]\n}\n\nexport interface INewPickleRunnerOptions {\n  eventBroadcaster: EventEmitter\n  stopwatch: ITestRunStopwatch\n  gherkinDocument: messages.IGherkinDocument\n  newId: IdGenerator.NewId\n  pickle: messages.IPickle\n  retries: number\n  skip: boolean\n  supportCodeLibrary: ISupportCodeLibrary\n  worldParameters: any\n}\n\nexport default class PickleRunner {\n  private readonly attachmentManager: AttachmentManager\n  private currentTestCaseStartedId: string\n  private currentTestStepId: string\n  private readonly eventBroadcaster: EventEmitter\n  private readonly stopwatch: ITestRunStopwatch\n  private readonly gherkinDocument: messages.IGherkinDocument\n  private readonly newId: IdGenerator.NewId\n  private readonly pickle: messages.IPickle\n  private readonly maxAttempts: number\n  private readonly skip: boolean\n  private readonly supportCodeLibrary: ISupportCodeLibrary\n  private readonly testCaseId: string\n  private readonly testSteps: ITestStep[]\n  private testStepResults: messages.TestStepFinished.ITestStepResult[]\n  private world: any\n  private readonly worldParameters: any\n\n  constructor({\n    eventBroadcaster,\n    stopwatch,\n    gherkinDocument,\n    newId,\n    pickle,\n    retries = 0,\n    skip,\n    supportCodeLibrary,\n    worldParameters,\n  }: INewPickleRunnerOptions) {\n    this.attachmentManager = new AttachmentManager(({ data, media }) => {\n      if (doesNotHaveValue(this.currentTestStepId)) {\n        throw new Error(\n          'Cannot attach when a step/hook is not running. Ensure your step/hook waits for the attach to finish.'\n        )\n      }\n      this.eventBroadcaster.emit(\n        'envelope',\n        messages.Envelope.fromObject({\n          attachment: {\n            body: data,\n            contentEncoding: media.encoding,\n            mediaType: media.contentType,\n            testCaseStartedId: this.currentTestCaseStartedId,\n            testStepId: this.currentTestStepId,\n          },\n        })\n      )\n    })\n    this.eventBroadcaster = eventBroadcaster\n    this.stopwatch = stopwatch\n    this.gherkinDocument = gherkinDocument\n    this.maxAttempts = 1 + (skip ? 0 : retries)\n    this.newId = newId\n    this.pickle = pickle\n    this.skip = skip\n    this.supportCodeLibrary = supportCodeLibrary\n    this.worldParameters = worldParameters\n    this.testCaseId = this.newId()\n    this.testSteps = this.buildTestSteps()\n    this.resetTestProgressData()\n  }\n\n  resetTestProgressData(): void {\n    this.world = new this.supportCodeLibrary.World({\n      attach: this.attachmentManager.create.bind(this.attachmentManager),\n      log: this.attachmentManager.log.bind(this.attachmentManager),\n      parameters: this.worldParameters,\n    })\n    this.testStepResults = []\n  }\n\n  buildTestSteps(): ITestStep[] {\n    const testSteps: ITestStep[] = []\n    this.getBeforeHookDefinitions().forEach((hookDefinition) => {\n      testSteps.push({\n        id: this.newId(),\n        hookDefinition,\n        isHook: true,\n        isBeforeHook: true,\n      })\n    })\n    this.pickle.steps.forEach((pickleStep) => {\n      const stepDefinitions = this.getStepDefinitions(pickleStep)\n      testSteps.push({\n        id: this.newId(),\n        pickleStep,\n        stepDefinitions,\n        isHook: false,\n      })\n    })\n    this.getAfterHookDefinitions().forEach((hookDefinition) => {\n      testSteps.push({\n        id: this.newId(),\n        hookDefinition,\n        isHook: true,\n      })\n    })\n    return testSteps\n  }\n\n  emitTestCase(): void {\n    const testCase = {\n      pickleId: this.pickle.id,\n      id: this.testCaseId,\n      testSteps: this.testSteps.map((testStep) => {\n        if (testStep.isHook) {\n          return {\n            id: testStep.id,\n            hookId: testStep.hookDefinition.id,\n          }\n        } else {\n          return {\n            id: testStep.id,\n            pickleStepId: testStep.pickleStep.id,\n            stepDefinitionIds: testStep.stepDefinitions.map((x) => x.id),\n            stepMatchArgumentsLists: testStep.stepDefinitions.map((x) => {\n              const result = x.expression.match(testStep.pickleStep.text)\n              return {\n                stepMatchArguments: result.map((arg) => {\n                  return {\n                    group: this.mapArgumentGroup(arg.group),\n                    parameterTypeName: arg.parameterType.name,\n                  }\n                }),\n              }\n            }),\n          }\n        }\n      }),\n    }\n    this.eventBroadcaster.emit(\n      'envelope',\n      messages.Envelope.fromObject({ testCase })\n    )\n  }\n\n  private mapArgumentGroup(\n    group: Group\n  ): messages.TestCase.TestStep.StepMatchArgumentsList.StepMatchArgument.IGroup {\n    return {\n      start: group.start,\n      value: group.value,\n      children: doesHaveValue(group.children)\n        ? group.children.map((child) => this.mapArgumentGroup(child))\n        : undefined,\n    }\n  }\n\n  getAfterHookDefinitions(): TestCaseHookDefinition[] {\n    return clone(this.supportCodeLibrary.afterTestCaseHookDefinitions)\n      .reverse()\n      .filter((hookDefinition) => hookDefinition.appliesToTestCase(this.pickle))\n  }\n\n  getBeforeHookDefinitions(): TestCaseHookDefinition[] {\n    return this.supportCodeLibrary.beforeTestCaseHookDefinitions.filter(\n      (hookDefinition) => hookDefinition.appliesToTestCase(this.pickle)\n    )\n  }\n\n  getBeforeStepHookDefinitions(): TestStepHookDefinition[] {\n    return this.supportCodeLibrary.beforeTestStepHookDefinitions.filter(\n      (hookDefinition) => hookDefinition.appliesToTestCase(this.pickle)\n    )\n  }\n\n  getAfterStepHookDefinitions(): TestStepHookDefinition[] {\n    return clone(this.supportCodeLibrary.afterTestStepHookDefinitions)\n      .reverse()\n      .filter((hookDefinition) => hookDefinition.appliesToTestCase(this.pickle))\n  }\n\n  getStepDefinitions(\n    pickleStep: messages.Pickle.IPickleStep\n  ): StepDefinition[] {\n    return this.supportCodeLibrary.stepDefinitions.filter((stepDefinition) =>\n      stepDefinition.matchesStepName(pickleStep.text)\n    )\n  }\n\n  getWorstStepResult(): messages.TestStepFinished.ITestStepResult {\n    if (this.testStepResults.length === 0) {\n      return messages.TestStepFinished.TestStepResult.fromObject({\n        status: this.skip ? Status.SKIPPED : Status.PASSED,\n      })\n    }\n    return new Query().getWorstTestStepResult(this.testStepResults)\n  }\n\n  async invokeStep(\n    step: messages.Pickle.IPickleStep,\n    stepDefinition: IDefinition,\n    hookParameter?: any\n  ): Promise<messages.TestStepFinished.ITestStepResult> {\n    return await StepRunner.run({\n      defaultTimeout: this.supportCodeLibrary.defaultTimeout,\n      hookParameter,\n      step,\n      stepDefinition,\n      world: this.world,\n    })\n  }\n\n  isSkippingSteps(): boolean {\n    return this.getWorstStepResult().status !== Status.PASSED\n  }\n\n  shouldSkipHook(isBeforeHook: boolean): boolean {\n    return this.skip || (this.isSkippingSteps() && isBeforeHook)\n  }\n\n  async aroundTestStep(\n    testStepId: string,\n    attempt: number,\n    runStepFn: () => Promise<messages.TestStepFinished.ITestStepResult>\n  ): Promise<void> {\n    this.eventBroadcaster.emit(\n      'envelope',\n      messages.Envelope.fromObject({\n        testStepStarted: {\n          testCaseStartedId: this.currentTestCaseStartedId,\n          testStepId,\n          timestamp: this.stopwatch.timestamp(),\n        },\n      })\n    )\n    this.currentTestStepId = testStepId\n    const testStepResult = await runStepFn()\n    this.currentTestStepId = null\n    this.testStepResults.push(testStepResult)\n    if (\n      testStepResult.status === Status.FAILED &&\n      attempt + 1 < this.maxAttempts\n    ) {\n      /*\n      TODO dont rely on `testStepResult.willBeRetried`, it will be moved or removed\n      see https://github.com/cucumber/cucumber/issues/902\n       */\n      testStepResult.willBeRetried = true\n    }\n    this.eventBroadcaster.emit(\n      'envelope',\n      messages.Envelope.fromObject({\n        testStepFinished: {\n          testCaseStartedId: this.currentTestCaseStartedId,\n          testStepId,\n          testStepResult,\n          timestamp: this.stopwatch.timestamp(),\n        },\n      })\n    )\n  }\n\n  async run(): Promise<messages.TestStepFinished.TestStepResult.Status> {\n    this.emitTestCase()\n    for (let attempt = 0; attempt < this.maxAttempts; attempt++) {\n      this.currentTestCaseStartedId = this.newId()\n      this.eventBroadcaster.emit(\n        'envelope',\n        messages.Envelope.fromObject({\n          testCaseStarted: {\n            attempt,\n            testCaseId: this.testCaseId,\n            id: this.currentTestCaseStartedId,\n            timestamp: this.stopwatch.timestamp(),\n          },\n        })\n      )\n      for (const testStep of this.testSteps) {\n        await this.aroundTestStep(testStep.id, attempt, async () => {\n          if (testStep.isHook) {\n            const hookParameter: ITestCaseHookParameter = {\n              gherkinDocument: this.gherkinDocument,\n              pickle: this.pickle,\n              testCaseStartedId: this.currentTestCaseStartedId,\n            }\n            if (!testStep.isBeforeHook) {\n              hookParameter.result = this.getWorstStepResult()\n            }\n            return await this.runHook(\n              testStep.hookDefinition,\n              hookParameter,\n              testStep.isBeforeHook\n            )\n          } else {\n            return await this.runStep(testStep)\n          }\n        })\n      }\n      this.eventBroadcaster.emit(\n        'envelope',\n        messages.Envelope.fromObject({\n          testCaseFinished: {\n            testCaseStartedId: this.currentTestCaseStartedId,\n            timestamp: this.stopwatch.timestamp(),\n          },\n        })\n      )\n      if (!this.getWorstStepResult().willBeRetried) {\n        break\n      }\n      this.resetTestProgressData()\n    }\n    return this.getWorstStepResult().status\n  }\n\n  async runHook(\n    hookDefinition: TestCaseHookDefinition,\n    hookParameter: ITestCaseHookParameter,\n    isBeforeHook: boolean\n  ): Promise<messages.TestStepFinished.ITestStepResult> {\n    if (this.shouldSkipHook(isBeforeHook)) {\n      return messages.TestStepFinished.TestStepResult.fromObject({\n        status: Status.SKIPPED,\n      })\n    }\n    return await this.invokeStep(null, hookDefinition, hookParameter)\n  }\n\n  async runStepHooks(\n    stepHooks: TestStepHookDefinition[],\n    stepResult?: messages.TestStepFinished.ITestStepResult\n  ): Promise<messages.TestStepFinished.ITestStepResult[]> {\n    const stepHooksResult = []\n    const hookParameter: ITestStepHookParameter = {\n      gherkinDocument: this.gherkinDocument,\n      pickle: this.pickle,\n      testCaseStartedId: this.currentTestCaseStartedId,\n      testStepId: this.currentTestStepId,\n      result: stepResult,\n    }\n    for (const stepHookDefinition of stepHooks) {\n      stepHooksResult.push(\n        await this.invokeStep(null, stepHookDefinition, hookParameter)\n      )\n    }\n    return stepHooksResult\n  }\n\n  async runStep(\n    testStep: ITestStep\n  ): Promise<messages.TestStepFinished.ITestStepResult> {\n    if (testStep.stepDefinitions.length === 0) {\n      return messages.TestStepFinished.TestStepResult.fromObject({\n        status: Status.UNDEFINED,\n        duration: {\n          seconds: '0',\n          nanos: 0,\n        },\n      })\n    } else if (testStep.stepDefinitions.length > 1) {\n      return messages.TestStepFinished.TestStepResult.fromObject({\n        message: getAmbiguousStepException(testStep.stepDefinitions),\n        status: Status.AMBIGUOUS,\n        duration: {\n          seconds: '0',\n          nanos: 0,\n        },\n      })\n    } else if (this.isSkippingSteps()) {\n      return messages.TestStepFinished.TestStepResult.fromObject({\n        status: Status.SKIPPED,\n        duration: {\n          seconds: '0',\n          nanos: 0,\n        },\n      })\n    }\n\n    let stepResult\n    let stepResults = await this.runStepHooks(\n      this.getBeforeStepHookDefinitions(),\n      stepResult\n    )\n    if (\n      new Query().getWorstTestStepResult(stepResults).status !== Status.FAILED\n    ) {\n      stepResult = await this.invokeStep(\n        testStep.pickleStep,\n        testStep.stepDefinitions[0]\n      )\n      stepResults.push(stepResult)\n    }\n    const afterStepHookResults = await this.runStepHooks(\n      this.getAfterStepHookDefinitions(),\n      stepResult\n    )\n    stepResults = stepResults.concat(afterStepHookResults)\n\n    const finalStepResult = new Query().getWorstTestStepResult(stepResults)\n    let finalDuration = getZeroDuration()\n    for (const result of stepResults) {\n      finalDuration = addDurations(finalDuration, result.duration)\n    }\n    finalStepResult.duration = finalDuration\n    return finalStepResult\n  }\n}\n"]}