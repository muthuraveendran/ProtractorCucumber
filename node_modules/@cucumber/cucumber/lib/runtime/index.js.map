{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/runtime/index.ts"],"names":[],"mappings":"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","sourcesContent":["import _, { clone } from 'lodash'\nimport { EventDataCollector, formatLocation } from '../formatter/helpers'\nimport bluebird from 'bluebird'\nimport StackTraceFilter from '../stack_trace_filter'\nimport Status from '../status'\nimport UserCodeRunner from '../user_code_runner'\nimport VError from 'verror'\nimport { retriesForPickle } from './helpers'\nimport { IdGenerator, messages } from '@cucumber/messages'\nimport PickleRunner from './pickle_runner'\nimport { EventEmitter } from 'events'\nimport { ISupportCodeLibrary } from '../support_code_library_builder/types'\nimport TestRunHookDefinition from '../models/test_run_hook_definition'\nimport { doesHaveValue, valueOrDefault } from '../value_checker'\nimport {\n  ITestRunStopwatch,\n  PredictableTestRunStopwatch,\n  RealTestRunStopwatch,\n} from './stopwatch'\n\nexport interface INewRuntimeOptions {\n  eventBroadcaster: EventEmitter\n  eventDataCollector: EventDataCollector\n  newId: IdGenerator.NewId\n  options: IRuntimeOptions\n  pickleIds: string[]\n  supportCodeLibrary: ISupportCodeLibrary\n}\n\nexport interface IRuntimeOptions {\n  dryRun: boolean\n  predictableIds: boolean\n  failFast: boolean\n  filterStacktraces: boolean\n  retry: number\n  retryTagFilter: string\n  strict: boolean\n  worldParameters: any\n}\n\nexport default class Runtime {\n  private readonly eventBroadcaster: EventEmitter\n  private readonly eventDataCollector: EventDataCollector\n  private readonly stopwatch: ITestRunStopwatch\n  private readonly newId: IdGenerator.NewId\n  private readonly options: IRuntimeOptions\n  private readonly pickleIds: string[]\n  private readonly stackTraceFilter: StackTraceFilter\n  private readonly supportCodeLibrary: ISupportCodeLibrary\n  private success: boolean\n\n  constructor({\n    eventBroadcaster,\n    eventDataCollector,\n    newId,\n    options,\n    pickleIds,\n    supportCodeLibrary,\n  }: INewRuntimeOptions) {\n    this.eventBroadcaster = eventBroadcaster\n    this.eventDataCollector = eventDataCollector\n    this.stopwatch = options.predictableIds\n      ? new PredictableTestRunStopwatch()\n      : new RealTestRunStopwatch()\n    this.newId = newId\n    this.options = options\n    this.pickleIds = pickleIds\n    this.stackTraceFilter = new StackTraceFilter()\n    this.supportCodeLibrary = supportCodeLibrary\n    this.success = true\n  }\n\n  async runTestRunHooks(\n    definitions: TestRunHookDefinition[],\n    name: string\n  ): Promise<void> {\n    if (this.options.dryRun) {\n      return\n    }\n    await bluebird.each(\n      definitions,\n      async (hookDefinition: TestRunHookDefinition) => {\n        const { error } = await UserCodeRunner.run({\n          argsArray: [],\n          fn: hookDefinition.code,\n          thisArg: null,\n          timeoutInMilliseconds: valueOrDefault(\n            hookDefinition.options.timeout,\n            this.supportCodeLibrary.defaultTimeout\n          ),\n        })\n        if (doesHaveValue(error)) {\n          const location = formatLocation(hookDefinition)\n          throw new VError(\n            error,\n            `${name} hook errored, process exiting: ${location}`\n          )\n        }\n      }\n    )\n  }\n\n  async runPickle(pickleId: string): Promise<void> {\n    const pickle = this.eventDataCollector.getPickle(pickleId)\n    const retries = retriesForPickle(pickle, this.options)\n    const skip = this.options.dryRun || (this.options.failFast && !this.success)\n    const pickleRunner = new PickleRunner({\n      eventBroadcaster: this.eventBroadcaster,\n      stopwatch: this.stopwatch,\n      gherkinDocument: this.eventDataCollector.getGherkinDocument(pickle.uri),\n      newId: this.newId,\n      pickle,\n      retries,\n      skip,\n      supportCodeLibrary: this.supportCodeLibrary,\n      worldParameters: this.options.worldParameters,\n    })\n    const status = await pickleRunner.run()\n    if (this.shouldCauseFailure(status)) {\n      this.success = false\n    }\n  }\n\n  async start(): Promise<boolean> {\n    if (this.options.filterStacktraces) {\n      this.stackTraceFilter.filter()\n    }\n    this.eventBroadcaster.emit(\n      'envelope',\n      new messages.Envelope({\n        testRunStarted: {\n          timestamp: this.stopwatch.timestamp(),\n        },\n      })\n    )\n    this.stopwatch.start()\n    await this.runTestRunHooks(\n      this.supportCodeLibrary.beforeTestRunHookDefinitions,\n      'a BeforeAll'\n    )\n    await bluebird.each(this.pickleIds, this.runPickle.bind(this))\n    await this.runTestRunHooks(\n      clone(this.supportCodeLibrary.afterTestRunHookDefinitions).reverse(),\n      'an AfterAll'\n    )\n    this.stopwatch.stop()\n    this.eventBroadcaster.emit(\n      'envelope',\n      messages.Envelope.fromObject({\n        testRunFinished: {\n          timestamp: this.stopwatch.timestamp(),\n        },\n      })\n    )\n    if (this.options.filterStacktraces) {\n      this.stackTraceFilter.unfilter()\n    }\n    return this.success\n  }\n\n  shouldCauseFailure(\n    status: messages.TestStepFinished.TestStepResult.Status\n  ): boolean {\n    return (\n      _.includes([Status.AMBIGUOUS, Status.FAILED, Status.UNDEFINED], status) ||\n      (status === Status.PENDING && this.options.strict)\n    )\n  }\n}\n"]}