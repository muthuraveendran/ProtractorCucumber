{"version":3,"file":"time.js","sourceRoot":"","sources":["../src/time.ts"],"names":[],"mappings":"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","sourcesContent":["import { messages, TimeConversion } from '@cucumber/messages'\nimport { doesNotHaveValue } from './value_checker'\nimport Long from 'long'\n\nexport const NANOSECONDS_IN_MILLISECOND = 1e6\nexport const MILLISECONDS_IN_SECOND = 1e3\nexport const NANOSECONDS_IN_SECOND = 1e9\n\nlet previousTimestamp: number\n\nconst methods: any = {\n  beginTiming() {\n    previousTimestamp = getTimestamp()\n  },\n  clearInterval: clearInterval.bind(global),\n  clearTimeout: clearTimeout.bind(global),\n  Date,\n  endTiming() {\n    return getTimestamp() - previousTimestamp\n  },\n  setInterval: setInterval.bind(global),\n  setTimeout: setTimeout.bind(global),\n}\n\nif (typeof setImmediate !== 'undefined') {\n  methods.setImmediate = setImmediate.bind(global)\n  methods.clearImmediate = clearImmediate.bind(global)\n}\n\nfunction getTimestamp(): number {\n  return new methods.Date().getTime()\n}\n\nfunction toNumber(x: number | Long): number {\n  return typeof x === 'number' ? x : x.toNumber()\n}\n\nexport function addDurations(\n  a: messages.IDuration,\n  b: messages.IDuration\n): messages.IDuration {\n  if (doesNotHaveValue(b)) {\n    return a\n  }\n  let seconds = toNumber(a.seconds) + toNumber(b.seconds)\n  let nanos = a.nanos + b.nanos\n  if (nanos > NANOSECONDS_IN_SECOND) {\n    seconds += 1\n    nanos -= NANOSECONDS_IN_SECOND\n  }\n  return new messages.Duration({ seconds, nanos })\n}\n\n// TODO use TimeConversion methods in cucumber-messages\n//   dependent on https://github.com/cucumber/cucumber/pull/832\nexport function millisecondsToDuration(\n  milliseconds: number\n): messages.IDuration {\n  const seconds = Math.floor(milliseconds / MILLISECONDS_IN_SECOND)\n  const nanos =\n    (milliseconds - seconds * MILLISECONDS_IN_SECOND) *\n    NANOSECONDS_IN_MILLISECOND\n  return new messages.Duration({ seconds, nanos })\n}\n\nexport function durationToMilliseconds(duration: messages.IDuration): number {\n  const secondMillis = toNumber(duration.seconds) * MILLISECONDS_IN_SECOND\n  const nanoMillis = duration.nanos / NANOSECONDS_IN_MILLISECOND\n  return secondMillis + nanoMillis\n}\n\nexport function durationToNanoseconds(duration: messages.IDuration): number {\n  return toNumber(duration.seconds) * NANOSECONDS_IN_SECOND + duration.nanos\n}\n\nexport function durationBetweenTimestamps(\n  startedTimestamp: messages.ITimestamp,\n  finishedTimestamp: messages.ITimestamp\n): messages.IDuration {\n  const durationMillis =\n    TimeConversion.timestampToMillisecondsSinceEpoch(finishedTimestamp) -\n    TimeConversion.timestampToMillisecondsSinceEpoch(startedTimestamp)\n  return TimeConversion.millisecondsToDuration(durationMillis)\n}\n\nexport function getZeroDuration(): messages.IDuration {\n  return new messages.Duration({ seconds: 0, nanos: 0 })\n}\n\nexport default methods\n"]}