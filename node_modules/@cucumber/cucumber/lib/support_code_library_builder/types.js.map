{"version":3,"file":"types.js","sourceRoot":"","sources":["../../src/support_code_library_builder/types.ts"],"names":[],"mappings":"","sourcesContent":["import { messages } from '@cucumber/messages'\nimport TestCaseHookDefinition from '../models/test_case_hook_definition'\nimport TestStepHookDefinition from '../models/test_step_hook_definition'\nimport TestRunHookDefinition from '../models/test_run_hook_definition'\nimport StepDefinition from '../models/step_definition'\nimport { ParameterTypeRegistry } from '@cucumber/cucumber-expressions'\n\nexport type DefineStepPattern = string | RegExp\n\nexport interface ITestCaseHookParameter {\n  gherkinDocument: messages.IGherkinDocument\n  pickle: messages.IPickle\n  result?: messages.TestStepFinished.ITestStepResult\n  testCaseStartedId: string\n}\n\nexport interface ITestStepHookParameter {\n  gherkinDocument: messages.IGherkinDocument\n  pickle: messages.IPickle\n  result: messages.TestStepFinished.ITestStepResult\n  testCaseStartedId: string\n  testStepId: string\n}\n\nexport type TestCaseHookFunctionWithoutParameter = () => any | Promise<any>\nexport type TestCaseHookFunctionWithParameter = (\n  arg: ITestCaseHookParameter\n) => any | Promise<any>\nexport type TestCaseHookFunction =\n  | TestCaseHookFunctionWithoutParameter\n  | TestCaseHookFunctionWithParameter\n\nexport type TestStepHookFunctionWithoutParameter = () => void\nexport type TestStepHookFunctionWithParameter = (\n  arg: ITestStepHookParameter\n) => void\nexport type TestStepHookFunction =\n  | TestStepHookFunctionWithoutParameter\n  | TestStepHookFunctionWithParameter\n\nexport interface IDefineStepOptions {\n  timeout?: number\n  wrapperOptions?: any\n}\n\nexport interface IDefineTestCaseHookOptions {\n  tags?: string\n  timeout?: number\n}\n\nexport interface IDefineTestStepHookOptions {\n  tags?: string\n  timeout?: number\n}\n\nexport interface IDefineTestRunHookOptions {\n  timeout?: number\n}\n\nexport interface IParameterTypeDefinition<T> {\n  name: string\n  regexp: RegExp\n  transformer: (...match: string[]) => T\n  useForSnippets?: boolean\n  preferForRegexpMatch?: boolean\n}\n\nexport interface IDefineSupportCodeMethods {\n  defineParameterType: (options: IParameterTypeDefinition<any>) => void\n  defineStep: ((pattern: DefineStepPattern, code: Function) => void) &\n    ((\n      pattern: DefineStepPattern,\n      options: IDefineStepOptions,\n      code: Function\n    ) => void)\n  setDefaultTimeout: (milliseconds: number) => void\n  setDefinitionFunctionWrapper: (fn: Function) => void\n  setWorldConstructor: (fn: any) => void\n  After: ((code: TestCaseHookFunction) => void) &\n    ((tags: string, code: TestCaseHookFunction) => void) &\n    ((options: IDefineTestCaseHookOptions, code: TestCaseHookFunction) => void)\n  AfterStep: ((code: TestStepHookFunction) => void) &\n    ((tags: string, code: TestStepHookFunction) => void) &\n    ((options: IDefineTestStepHookOptions, code: TestStepHookFunction) => void)\n  AfterAll: ((code: Function) => void) &\n    ((options: IDefineTestRunHookOptions, code: Function) => void)\n  Before: ((code: TestCaseHookFunction) => void) &\n    ((tags: string, code: TestCaseHookFunction) => void) &\n    ((options: IDefineTestCaseHookOptions, code: TestCaseHookFunction) => void)\n  BeforeStep: ((code: TestStepHookFunction) => void) &\n    ((tags: string, code: TestStepHookFunction) => void) &\n    ((options: IDefineTestStepHookOptions, code: TestStepHookFunction) => void)\n  BeforeAll: ((code: Function) => void) &\n    ((options: IDefineTestRunHookOptions, code: Function) => void)\n  Given: ((pattern: DefineStepPattern, code: Function) => void) &\n    ((\n      pattern: DefineStepPattern,\n      options: IDefineStepOptions,\n      code: Function\n    ) => void)\n  Then: ((pattern: DefineStepPattern, code: Function) => void) &\n    ((\n      pattern: DefineStepPattern,\n      options: IDefineStepOptions,\n      code: Function\n    ) => void)\n  When: ((pattern: DefineStepPattern, code: Function) => void) &\n    ((\n      pattern: DefineStepPattern,\n      options: IDefineStepOptions,\n      code: Function\n    ) => void)\n}\n\nexport interface ISupportCodeLibrary {\n  readonly afterTestCaseHookDefinitions: TestCaseHookDefinition[]\n  readonly afterTestStepHookDefinitions: TestStepHookDefinition[]\n  readonly afterTestRunHookDefinitions: TestRunHookDefinition[]\n  readonly beforeTestCaseHookDefinitions: TestCaseHookDefinition[]\n  readonly beforeTestStepHookDefinitions: TestStepHookDefinition[]\n  readonly beforeTestRunHookDefinitions: TestRunHookDefinition[]\n  readonly defaultTimeout: number\n  readonly stepDefinitions: StepDefinition[]\n  readonly undefinedParameterTypes: messages.IUndefinedParameterType[]\n  readonly parameterTypeRegistry: ParameterTypeRegistry\n  readonly World: any\n}\n"]}