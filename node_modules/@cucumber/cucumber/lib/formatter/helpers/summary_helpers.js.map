{"version":3,"file":"summary_helpers.js","sourceRoot":"","sources":["../../../src/formatter/helpers/summary_helpers.ts"],"names":[],"mappings":"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","sourcesContent":["import _ from 'lodash'\nimport Duration from 'duration'\nimport Status from '../../status'\nimport { addDurations, getZeroDuration } from '../../time'\nimport { IColorFns } from '../get_color_fns'\nimport { ITestCaseAttempt } from './event_data_collector'\nimport { messages, TimeConversion } from '@cucumber/messages'\n\nconst STATUS_REPORT_ORDER = [\n  Status.FAILED,\n  Status.AMBIGUOUS,\n  Status.UNDEFINED,\n  Status.PENDING,\n  Status.SKIPPED,\n  Status.PASSED,\n]\n\nexport interface IFormatSummaryRequest {\n  colorFns: IColorFns\n  testCaseAttempts: ITestCaseAttempt[]\n  testRunDuration: messages.IDuration\n}\n\nexport function formatSummary({\n  colorFns,\n  testCaseAttempts,\n  testRunDuration,\n}: IFormatSummaryRequest): string {\n  const testCaseResults: messages.TestStepFinished.ITestStepResult[] = []\n  const testStepResults: messages.TestStepFinished.ITestStepResult[] = []\n  let totalStepDuration = getZeroDuration()\n  testCaseAttempts.forEach(({ testCase, worstTestStepResult, stepResults }) => {\n    Object.values(stepResults).forEach((stepResult) => {\n      totalStepDuration = addDurations(totalStepDuration, stepResult.duration)\n    })\n    if (!worstTestStepResult.willBeRetried) {\n      testCaseResults.push(worstTestStepResult)\n      _.each(testCase.testSteps, (testStep) => {\n        if (testStep.pickleStepId !== '') {\n          testStepResults.push(stepResults[testStep.id])\n        }\n      })\n    }\n  })\n  const scenarioSummary = getCountSummary({\n    colorFns,\n    objects: testCaseResults,\n    type: 'scenario',\n  })\n  const stepSummary = getCountSummary({\n    colorFns,\n    objects: testStepResults,\n    type: 'step',\n  })\n  const durationSummary = `${getDurationSummary(\n    testRunDuration\n  )} (executing steps: ${getDurationSummary(totalStepDuration)})\\n`\n  return [scenarioSummary, stepSummary, durationSummary].join('\\n')\n}\n\ninterface IGetCountSummaryRequest {\n  colorFns: IColorFns\n  objects: messages.TestStepFinished.ITestStepResult[]\n  type: string\n}\n\nfunction getCountSummary({\n  colorFns,\n  objects,\n  type,\n}: IGetCountSummaryRequest): string {\n  const counts = _.chain(objects).groupBy('status').mapValues('length').value()\n  const total = _.chain(counts).values().sum().value()\n  let text = `${total.toString()} ${type}${total === 1 ? '' : 's'}`\n  if (total > 0) {\n    const details: string[] = []\n    STATUS_REPORT_ORDER.forEach((status) => {\n      if (counts[status] > 0) {\n        details.push(\n          colorFns.forStatus(status)(\n            `${counts[status].toString()} ${Status[status].toLowerCase()}`\n          )\n        )\n      }\n    })\n    text += ` (${details.join(', ')})`\n  }\n  return text\n}\n\nfunction getDurationSummary(durationMsg: messages.IDuration): string {\n  const start = new Date(0)\n  const end = new Date(TimeConversion.durationToMilliseconds(durationMsg))\n  const duration = new Duration(start, end)\n  // Use spaces in toString method for readability and to avoid %Ls which is a format\n  return duration.toString('%Ms m %S . %L s').replace(/ /g, '')\n}\n"]}