{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/formatter/helpers/usage_helpers/index.ts"],"names":[],"mappings":"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","sourcesContent":["import _, { Dictionary } from 'lodash'\nimport { getPickleStepMap } from '../pickle_parser'\nimport path from 'path'\nimport { getGherkinStepMap } from '../gherkin_document_parser'\nimport { durationToMilliseconds, millisecondsToDuration } from '../../../time'\nimport { messages } from '@cucumber/messages'\nimport StepDefinition from '../../../models/step_definition'\nimport { doesHaveValue } from '../../../value_checker'\nimport EventDataCollector from '../event_data_collector'\n\nexport interface IUsageMatch {\n  duration?: messages.IDuration\n  line: number\n  text: string\n  uri: string\n}\n\nexport interface IUsage {\n  code: string\n  line: number\n  matches: IUsageMatch[]\n  meanDuration?: messages.IDuration\n  pattern: string\n  patternType: string\n  uri: string\n}\n\nexport interface IGetUsageRequest {\n  cwd: string\n  eventDataCollector: EventDataCollector\n  stepDefinitions: StepDefinition[]\n}\n\nfunction buildEmptyMapping(\n  stepDefinitions: StepDefinition[]\n): Dictionary<IUsage> {\n  const mapping: Dictionary<IUsage> = {}\n  stepDefinitions.forEach((stepDefinition) => {\n    mapping[stepDefinition.id] = {\n      code: stepDefinition.unwrappedCode.toString(),\n      line: stepDefinition.line,\n      pattern: stepDefinition.expression.source,\n      patternType: stepDefinition.expression.constructor.name,\n      matches: [],\n      uri: stepDefinition.uri,\n    }\n  })\n  return mapping\n}\n\nfunction buildMapping({\n  cwd,\n  stepDefinitions,\n  eventDataCollector,\n}: IGetUsageRequest): Dictionary<IUsage> {\n  const mapping = buildEmptyMapping(stepDefinitions)\n  _.each(eventDataCollector.getTestCaseAttempts(), (testCaseAttempt) => {\n    const pickleStepMap = getPickleStepMap(testCaseAttempt.pickle)\n    const gherkinStepMap = getGherkinStepMap(testCaseAttempt.gherkinDocument)\n    testCaseAttempt.testCase.testSteps.forEach((testStep) => {\n      if (\n        testStep.pickleStepId !== '' &&\n        testStep.stepDefinitionIds.length === 1\n      ) {\n        const stepDefinitionId = testStep.stepDefinitionIds[0]\n        const pickleStep = pickleStepMap[testStep.pickleStepId]\n        const gherkinStep = gherkinStepMap[pickleStep.astNodeIds[0]]\n        const match: IUsageMatch = {\n          line: gherkinStep.location.line,\n          text: pickleStep.text,\n          uri: path.relative(cwd, testCaseAttempt.pickle.uri),\n        }\n        const { duration, status } = testCaseAttempt.stepResults[testStep.id]\n        if (\n          ![\n            messages.TestStepFinished.TestStepResult.Status.AMBIGUOUS,\n            messages.TestStepFinished.TestStepResult.Status.SKIPPED,\n            messages.TestStepFinished.TestStepResult.Status.UNDEFINED,\n          ].includes(status) &&\n          doesHaveValue(duration)\n        ) {\n          match.duration = duration\n        }\n        if (doesHaveValue(mapping[stepDefinitionId])) {\n          mapping[stepDefinitionId].matches.push(match)\n        }\n      }\n    })\n  })\n  return mapping\n}\n\nfunction invertDuration(duration: messages.IDuration): number {\n  if (doesHaveValue(duration)) {\n    return -1 * durationToMilliseconds(duration)\n  }\n  return 1\n}\n\nfunction buildResult(mapping: Dictionary<IUsage>): IUsage[] {\n  return _.chain(mapping)\n    .map(({ matches, ...rest }: IUsage) => {\n      const sortedMatches = _.sortBy(matches, [\n        (match: IUsageMatch) => invertDuration(match.duration),\n        'text',\n      ])\n      const result = { matches: sortedMatches, ...rest }\n      const durations: messages.IDuration[] = _.chain(matches)\n        .map((m: IUsageMatch) => m.duration)\n        .compact()\n        .value()\n      if (durations.length > 0) {\n        result.meanDuration = millisecondsToDuration(\n          _.meanBy(durations, (d: messages.IDuration) =>\n            durationToMilliseconds(d)\n          )\n        )\n      }\n      return result\n    })\n    .sortBy((usage: IUsage) => invertDuration(usage.meanDuration))\n    .value()\n}\n\nexport function getUsage({\n  cwd,\n  stepDefinitions,\n  eventDataCollector,\n}: IGetUsageRequest): IUsage[] {\n  const mapping = buildMapping({ cwd, stepDefinitions, eventDataCollector })\n  return buildResult(mapping)\n}\n"]}