{"version":3,"file":"test_case_attempt_formatter.js","sourceRoot":"","sources":["../../../src/formatter/helpers/test_case_attempt_formatter.ts"],"names":[],"mappings":"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","sourcesContent":["import indentString from 'indent-string'\nimport Status from '../../status'\nimport figures from 'figures'\nimport { formatLocation } from './location_helpers'\nimport {\n  IParsedTestStep,\n  parseTestCaseAttempt,\n} from './test_case_attempt_parser'\nimport { formatStepArgument } from './step_argument_formatter'\nimport { IColorFns } from '../get_color_fns'\nimport { doesHaveValue, valueOrDefault } from '../../value_checker'\nimport { ITestCaseAttempt } from './event_data_collector'\nimport StepDefinitionSnippetBuilder from '../step_definition_snippet_builder'\nimport { ISupportCodeLibrary } from '../../support_code_library_builder/types'\n\nconst CHARACTERS: { [status: number]: string } = {\n  [Status.AMBIGUOUS]: figures.cross,\n  [Status.FAILED]: figures.cross,\n  [Status.PASSED]: figures.tick,\n  [Status.PENDING]: '?',\n  [Status.SKIPPED]: '-',\n  [Status.UNDEFINED]: '?',\n}\n\nfunction getStepMessage(testStep: IParsedTestStep): string {\n  switch (testStep.result.status) {\n    case Status.AMBIGUOUS:\n    case Status.FAILED:\n      return testStep.result.message\n    case Status.UNDEFINED:\n      return `${\n        'Undefined. Implement with the following snippet:' + '\\n\\n'\n      }${indentString(testStep.snippet, 2)}\\n`\n    case Status.PENDING:\n      return 'Pending'\n  }\n  return ''\n}\n\ninterface IFormatStepRequest {\n  colorFns: IColorFns\n  testStep: IParsedTestStep\n}\n\nfunction formatStep({ colorFns, testStep }: IFormatStepRequest): string {\n  const {\n    result: { status },\n    actionLocation,\n    attachments,\n  } = testStep\n  const colorFn = colorFns.forStatus(status)\n  const identifier = testStep.keyword + valueOrDefault(testStep.text, '')\n  let text = colorFn(`${CHARACTERS[status]} ${identifier}`)\n  if (doesHaveValue(actionLocation)) {\n    text += ` # ${colorFns.location(formatLocation(actionLocation))}`\n  }\n  text += '\\n'\n  if (doesHaveValue(testStep.argument)) {\n    const argumentsText = formatStepArgument(testStep.argument)\n    text += indentString(`${colorFn(argumentsText)}\\n`, 4)\n  }\n  attachments.forEach(({ body, mediaType }) => {\n    const message = mediaType === 'text/plain' ? `: ${body}` : ''\n    text += indentString(`Attachment (${mediaType})${message}\\n`, 4)\n  })\n  const message = getStepMessage(testStep)\n  if (message !== '') {\n    text += `${indentString(colorFn(message), 4)}\\n`\n  }\n  return text\n}\n\nexport interface IFormatTestCaseAttemptRequest {\n  colorFns: IColorFns\n  cwd: string\n  testCaseAttempt: ITestCaseAttempt\n  snippetBuilder: StepDefinitionSnippetBuilder\n  supportCodeLibrary: ISupportCodeLibrary\n}\n\nexport function formatTestCaseAttempt({\n  colorFns,\n  cwd,\n  snippetBuilder,\n  supportCodeLibrary,\n  testCaseAttempt,\n}: IFormatTestCaseAttemptRequest): string {\n  const parsed = parseTestCaseAttempt({\n    cwd,\n    snippetBuilder,\n    testCaseAttempt,\n    supportCodeLibrary,\n  })\n  let text = `Scenario: ${parsed.testCase.name}`\n  text += getAttemptText(\n    parsed.testCase.attempt,\n    parsed.testCase.worstTestStepResult.willBeRetried\n  )\n  text += ` # ${colorFns.location(\n    formatLocation(parsed.testCase.sourceLocation)\n  )}\\n`\n  parsed.testSteps.forEach((testStep) => {\n    text += formatStep({ colorFns, testStep })\n  })\n  return `${text}\\n`\n}\n\nfunction getAttemptText(attempt: number, willBeRetried: boolean): string {\n  if (attempt > 0 || willBeRetried) {\n    const numberStr = (attempt + 1).toString()\n    const retriedStr = willBeRetried ? ', retried' : ''\n    return ` (attempt ${numberStr}${retriedStr})`\n  }\n  return ''\n}\n"]}