{"version":3,"file":"json_formatter.js","sourceRoot":"","sources":["../../src/formatter/json_formatter.ts"],"names":[],"mappings":";;;;;AAAA,oDAAsC;AACtC,0CAAiD;AACjD,uDAA8B;AAC9B,uCAA+E;AAC/E,kCAA+C;AAC/C,gDAAuB;AAEvB,+EAG0C;AAE1C,oDAAkE;AAClE,sDAAqD;AAQrD,MAAM,EAAE,iBAAiB,EAAE,qBAAqB,EAAE,GAAG,+BAAqB,CAAA;AAE1E,MAAM,EACJ,sBAAsB,EACtB,gBAAgB,EAChB,cAAc,GACf,GAAG,sBAAY,CAAA;AAoEhB,MAAqB,aAAc,SAAQ,UAAS;IAClD,YAAY,OAA0B;QACpC,KAAK,CAAC,OAAO,CAAC,CAAA;QACd,OAAO,CAAC,IAAI,CACV,6WAA6W,CAC9W,CAAA;QACD,OAAO,CAAC,gBAAgB,CAAC,EAAE,CAAC,UAAU,EAAE,CAAC,QAAmB,EAAE,EAAE;YAC9D,IAAI,6BAAa,CAAC,QAAQ,CAAC,eAAe,CAAC,EAAE;gBAC3C,IAAI,CAAC,iBAAiB,EAAE,CAAA;aACzB;QACH,CAAC,CAAC,CAAA;IACJ,CAAC;IAED,eAAe,CAAC,GAAuB;QACrC,OAAO,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,WAAW,EAAE,CAAA;IAClD,CAAC;IAED,eAAe,CAAC,SAAmD;QACjE,OAAO;YACL,IAAI,EAAE,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,KAAK,EAAE,gBAAC,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,EAAE,OAAO,CAAC,EAAE,CAAC,CAAC;SAC1E,CAAA;IACH,CAAC;IAED,eAAe,CACb,SAAuD,EACvD,WAAmD;QAEnD,OAAO;YACL,OAAO,EAAE,SAAS,CAAC,OAAO;YAC1B,IAAI,EAAE,WAAW,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI;SAC1C,CAAA;IACH,CAAC;IAED,kBAAkB,CAChB,YAA0C,EAC1C,WAAmD;QAEnD,IAAI,gCAAgB,CAAC,YAAY,CAAC,EAAE;YAClC,OAAO,EAAE,CAAA;SACV;QACD,OAAO;YACL,kCAAiB,CAAM,YAAY,EAAE;gBACnC,SAAS,EAAE,CAAC,SAAS,EAAE,EAAE,CAAC,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC;gBACzD,SAAS,EAAE,CAAC,SAAS,EAAE,EAAE,CAAC,IAAI,CAAC,eAAe,CAAC,SAAS,EAAE,WAAW,CAAC;aACvE,CAAC;SACH,CAAA;IACH,CAAC;IAED,iBAAiB;QACf,MAAM,uBAAuB,GAA6B,EAAE,CAAA;QAC5D,gBAAC,CAAC,IAAI,CACJ,IAAI,CAAC,kBAAkB,CAAC,mBAAmB,EAAE,EAC7C,CAAC,eAAiC,EAAE,EAAE;YACpC,IAAI,CAAC,eAAe,CAAC,mBAAmB,CAAC,aAAa,EAAE;gBACtD,MAAM,GAAG,GAAG,cAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,EAAE,eAAe,CAAC,MAAM,CAAC,GAAG,CAAC,CAAA;gBAC/D,IAAI,gCAAgB,CAAC,uBAAuB,CAAC,GAAG,CAAC,CAAC,EAAE;oBAClD,uBAAuB,CAAC,GAAG,CAAC,GAAG,EAAE,CAAA;iBAClC;gBACD,uBAAuB,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAA;aACnD;QACH,CAAC,CACF,CAAA;QACD,MAAM,QAAQ,GAAG,gBAAC,CAAC,GAAG,CAAC,uBAAuB,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE;YAC7D,MAAM,EAAE,eAAe,EAAE,GAAG,KAAK,CAAC,CAAC,CAAC,CAAA;YACpC,MAAM,cAAc,GAAG,iBAAiB,CAAC,eAAe,CAAC,CAAA;YACzD,MAAM,kBAAkB,GAAG,qBAAqB,CAAC,eAAe,CAAC,CAAA;YACjE,MAAM,qBAAqB,GAAG,kDAAwB,CAAC,eAAe,CAAC,CAAA;YACvE,MAAM,0BAA0B,GAAG,uDAA6B,CAC9D,eAAe,CAChB,CAAA;YACD,MAAM,QAAQ,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,eAAiC,EAAE,EAAE;gBAC/D,MAAM,EAAE,MAAM,EAAE,GAAG,eAAe,CAAA;gBAClC,MAAM,aAAa,GAAG,gBAAgB,CAAC,MAAM,CAAC,CAAA;gBAC9C,IAAI,YAAY,GAAG,IAAI,CAAA;gBACvB,MAAM,KAAK,GAAG,eAAe,CAAC,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE;oBAChE,YAAY,GAAG,YAAY,IAAI,QAAQ,CAAC,YAAY,KAAK,EAAE,CAAA;oBAC3D,OAAO,IAAI,CAAC,WAAW,CAAC;wBACtB,YAAY;wBACZ,cAAc;wBACd,aAAa;wBACb,QAAQ;wBACR,mBAAmB,EAAE,eAAe,CAAC,eAAe,CAAC,QAAQ,CAAC,EAAE,CAAC;wBACjE,cAAc,EAAE,eAAe,CAAC,WAAW,CAAC,QAAQ,CAAC,EAAE,CAAC;qBACzD,CAAC,CAAA;gBACJ,CAAC,CAAC,CAAA;gBACF,OAAO,IAAI,CAAC,eAAe,CAAC;oBAC1B,OAAO,EAAE,eAAe,CAAC,OAAO;oBAChC,0BAA0B;oBAC1B,qBAAqB;oBACrB,kBAAkB;oBAClB,MAAM;oBACN,KAAK;iBACN,CAAC,CAAA;YACJ,CAAC,CAAC,CAAA;YACF,OAAO,IAAI,CAAC,cAAc,CAAC;gBACzB,OAAO,EAAE,eAAe,CAAC,OAAO;gBAChC,QAAQ;gBACR,GAAG;aACJ,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;QACF,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAA;IAC7C,CAAC;IAED,cAAc,CAAC,EACb,OAAO,EACP,QAAQ,EACR,GAAG,GACsB;QACzB,OAAO;YACL,WAAW,EAAE,OAAO,CAAC,WAAW;YAChC,QAAQ;YACR,EAAE,EAAE,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC;YACjC,IAAI,EAAE,OAAO,CAAC,QAAQ,CAAC,IAAI;YAC3B,OAAO,EAAE,OAAO,CAAC,OAAO;YACxB,IAAI,EAAE,OAAO,CAAC,IAAI;YAClB,IAAI,EAAE,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC;YAClC,GAAG;SACJ,CAAA;IACH,CAAC;IAED,eAAe,CAAC,EACd,OAAO,EACP,0BAA0B,EAC1B,qBAAqB,EACrB,kBAAkB,EAClB,MAAM,EACN,KAAK,GACqB;QAC1B,MAAM,WAAW,GAAG,sBAAsB,CAAC;YACzC,MAAM;YACN,kBAAkB;SACnB,CAAC,CAAA;QACF,OAAO;YACL,WAAW;YACX,EAAE,EAAE,IAAI,CAAC,gBAAgB,CAAC,EAAE,OAAO,EAAE,MAAM,EAAE,qBAAqB,EAAE,CAAC;YACrE,OAAO,EAAE,kBAAkB,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO;YACzD,IAAI,EAAE,0BAA0B,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI;YAC3D,IAAI,EAAE,MAAM,CAAC,IAAI;YACjB,KAAK;YACL,IAAI,EAAE,IAAI,CAAC,eAAe,CAAC,EAAE,OAAO,EAAE,MAAM,EAAE,kBAAkB,EAAE,CAAC;YACnE,IAAI,EAAE,UAAU;SACjB,CAAA;IACH,CAAC;IAEO,gBAAgB,CAAC,EACvB,OAAO,EACP,MAAM,EACN,qBAAqB,GAKtB;QACC,IAAI,KAAY,CAAA;QAChB,MAAM,IAAI,GAAG,qBAAqB,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAA;QACxD,IAAI,6BAAa,CAAC,IAAI,CAAC,EAAE;YACvB,KAAK,GAAG,CAAC,OAAO,EAAE,IAAI,EAAE,MAAM,CAAC,CAAA;SAChC;aAAM;YACL,KAAK,GAAG,CAAC,OAAO,EAAE,MAAM,CAAC,CAAA;SAC1B;QACD,OAAO,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;IAClE,CAAC;IAED,WAAW,CAAC,EACV,YAAY,EACZ,cAAc,EACd,aAAa,EACb,QAAQ,EACR,mBAAmB,EACnB,cAAc,GACQ;QACtB,MAAM,IAAI,GAAc,EAAE,CAAA;QAC1B,IAAI,QAAQ,CAAC,YAAY,KAAK,EAAE,EAAE;YAChC,MAAM,UAAU,GAAG,aAAa,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAA;YACvD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,kBAAkB,CACtC,UAAU,CAAC,QAAQ,EACnB,cAAc,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CACzC,CAAA;YACD,IAAI,CAAC,OAAO,GAAG,cAAc,CAAC,EAAE,UAAU,EAAE,cAAc,EAAE,CAAC,CAAA;YAC7D,IAAI,CAAC,IAAI,GAAG,cAAc,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAA;YAClE,IAAI,CAAC,IAAI,GAAG,UAAU,CAAC,IAAI,CAAA;SAC5B;aAAM;YACL,IAAI,CAAC,OAAO,GAAG,YAAY,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAA;YAChD,IAAI,CAAC,MAAM,GAAG,IAAI,CAAA;SACnB;QACD,IAAI,QAAQ,CAAC,iBAAiB,CAAC,MAAM,KAAK,CAAC,EAAE;YAC3C,MAAM,cAAc,GAAG,IAAI,CAAC,kBAAkB,CAAC,eAAe,CAAC,IAAI,CACjE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,QAAQ,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAC9C,CAAA;YACD,IAAI,CAAC,KAAK,GAAG,EAAE,QAAQ,EAAE,wBAAc,CAAC,cAAc,CAAC,EAAE,CAAA;SAC1D;QACD,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,GAAG,cAAc,CAAA;QAC1C,IAAI,CAAC,MAAM,GAAG,EAAE,MAAM,EAAE,gBAAM,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,EAAE,CAAA;QACtD,IAAI,6BAAa,CAAC,cAAc,CAAC,QAAQ,CAAC,EAAE;YAC1C,IAAI,CAAC,MAAM,CAAC,QAAQ,GAAG,4BAAqB,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAA;SACtE;QACD,IAAI,MAAM,KAAK,gBAAM,CAAC,MAAM,IAAI,6BAAa,CAAC,OAAO,CAAC,EAAE;YACtD,IAAI,CAAC,MAAM,CAAC,aAAa,GAAG,OAAO,CAAA;SACpC;QACD,IAAI,gBAAC,CAAC,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,EAAE;YACnC,IAAI,CAAC,UAAU,GAAG,mBAAmB,CAAC,GAAG,CAAC,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;gBACzD,IAAI,EAAE,UAAU,CAAC,IAAI;gBACrB,SAAS,EAAE,UAAU,CAAC,SAAS;aAChC,CAAC,CAAC,CAAA;SACJ;QACD,OAAO,IAAI,CAAA;IACb,CAAC;IAED,cAAc,CAAC,OAAiB;QAC9B,OAAO,gBAAC,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;YACvC,IAAI,EAAE,OAAO,CAAC,IAAI;YAClB,IAAI,EAAE,OAAO,CAAC,QAAQ,CAAC,IAAI;SAC5B,CAAC,CAAC,CAAA;IACL,CAAC;IAED,eAAe,CAAC,EACd,OAAO,EACP,MAAM,EACN,kBAAkB,GAKnB;QACC,OAAO,gBAAC,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,OAAO,EAAE,EAAE;YACpC,MAAM,aAAa,GAAG,OAAO,CAAC,IAAI,CAAC,IAAI,CACrC,CAAC,CAAO,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,OAAO,CAAC,SAAS,CACxC,CAAA;YACD,MAAM,cAAc,GAAG,kBAAkB,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CACvE,CAAC,CAAO,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,OAAO,CAAC,SAAS,CACxC,CAAA;YACD,MAAM,IAAI,GAAG,6BAAa,CAAC,aAAa,CAAC;gBACvC,CAAC,CAAC,aAAa,CAAC,QAAQ,CAAC,IAAI;gBAC7B,CAAC,CAAC,cAAc,CAAC,QAAQ,CAAC,IAAI,CAAA;YAChC,OAAO;gBACL,IAAI,EAAE,OAAO,CAAC,IAAI;gBAClB,IAAI;aACL,CAAA;QACH,CAAC,CAAC,CAAA;IACJ,CAAC;CACF;AAhPD,gCAgPC","sourcesContent":["import _, { Dictionary } from 'lodash'\nimport Formatter, { IFormatterOptions } from './'\nimport Status from '../status'\nimport { formatLocation, GherkinDocumentParser, PickleParser } from './helpers'\nimport { durationToNanoseconds } from '../time'\nimport path from 'path'\nimport { messages } from '@cucumber/messages'\nimport {\n  getGherkinExampleRuleMap,\n  getGherkinScenarioLocationMap,\n} from './helpers/gherkin_document_parser'\nimport { ITestCaseAttempt } from './helpers/event_data_collector'\nimport { doesHaveValue, doesNotHaveValue } from '../value_checker'\nimport { parseStepArgument } from '../step_arguments'\nimport ITag = messages.GherkinDocument.Feature.ITag\nimport IFeature = messages.GherkinDocument.IFeature\nimport IPickle = messages.IPickle\nimport IScenario = messages.GherkinDocument.Feature.IScenario\nimport IEnvelope = messages.IEnvelope\nimport IRule = messages.GherkinDocument.Feature.FeatureChild.IRule\n\nconst { getGherkinStepMap, getGherkinScenarioMap } = GherkinDocumentParser\n\nconst {\n  getScenarioDescription,\n  getPickleStepMap,\n  getStepKeyword,\n} = PickleParser\n\nexport interface IJsonFeature {\n  description: string\n  elements: IJsonScenario[]\n  id: string\n  keyword: string\n  line: number\n  name: string\n  tags: IJsonTag[]\n  uri: string\n}\n\nexport interface IJsonScenario {\n  description: string\n  id: string\n  keyword: string\n  line: number\n  name: string\n  steps: IJsonStep[]\n  tags: IJsonTag[]\n  type: string\n}\n\nexport interface IJsonStep {\n  arguments?: any // TODO\n  embeddings?: any // TODO\n  hidden?: boolean\n  keyword?: string // TODO, not optional\n  line?: number\n  match?: any // TODO\n  name?: string\n  result?: any // TODO\n}\n\nexport interface IJsonTag {\n  name: string\n  line: number\n}\n\ninterface IBuildJsonFeatureOptions {\n  feature: messages.GherkinDocument.IFeature\n  elements: IJsonScenario[]\n  uri: string\n}\n\ninterface IBuildJsonScenarioOptions {\n  feature: messages.GherkinDocument.IFeature\n  gherkinScenarioMap: Dictionary<IScenario>\n  gherkinExampleRuleMap: Dictionary<IRule>\n  gherkinScenarioLocationMap: Dictionary<messages.ILocation>\n  pickle: messages.IPickle\n  steps: IJsonStep[]\n}\n\ninterface IBuildJsonStepOptions {\n  isBeforeHook: boolean\n  gherkinStepMap: Dictionary<messages.GherkinDocument.Feature.IStep>\n  pickleStepMap: Dictionary<messages.Pickle.IPickleStep>\n  testStep: messages.TestCase.ITestStep\n  testStepAttachments: messages.IAttachment[]\n  testStepResult: messages.TestStepFinished.ITestStepResult\n}\n\ninterface UriToTestCaseAttemptsMap {\n  [uri: string]: ITestCaseAttempt[]\n}\n\nexport default class JsonFormatter extends Formatter {\n  constructor(options: IFormatterOptions) {\n    super(options)\n    console.warn(\n      \"The built-in JSON formatter is deprecated and will be removed in the next major release. Where you need a structured data representation of your test run, it's best to use the `message` formatter. For legacy tools that depend on the deprecated JSON format, a standalone formatter is available (see https://github.com/cucumber/cucumber/tree/master/json-formatter).\"\n    )\n    options.eventBroadcaster.on('envelope', (envelope: IEnvelope) => {\n      if (doesHaveValue(envelope.testRunFinished)) {\n        this.onTestRunFinished()\n      }\n    })\n  }\n\n  convertNameToId(obj: IFeature | IPickle): string {\n    return obj.name.replace(/ /g, '-').toLowerCase()\n  }\n\n  formatDataTable(dataTable: messages.PickleStepArgument.IPickleTable): any {\n    return {\n      rows: dataTable.rows.map((row) => ({ cells: _.map(row.cells, 'value') })),\n    }\n  }\n\n  formatDocString(\n    docString: messages.PickleStepArgument.IPickleDocString,\n    gherkinStep: messages.GherkinDocument.Feature.IStep\n  ): any {\n    return {\n      content: docString.content,\n      line: gherkinStep.docString.location.line,\n    }\n  }\n\n  formatStepArgument(\n    stepArgument: messages.IPickleStepArgument,\n    gherkinStep: messages.GherkinDocument.Feature.IStep\n  ): any {\n    if (doesNotHaveValue(stepArgument)) {\n      return []\n    }\n    return [\n      parseStepArgument<any>(stepArgument, {\n        dataTable: (dataTable) => this.formatDataTable(dataTable),\n        docString: (docString) => this.formatDocString(docString, gherkinStep),\n      }),\n    ]\n  }\n\n  onTestRunFinished(): void {\n    const groupedTestCaseAttempts: UriToTestCaseAttemptsMap = {}\n    _.each(\n      this.eventDataCollector.getTestCaseAttempts(),\n      (testCaseAttempt: ITestCaseAttempt) => {\n        if (!testCaseAttempt.worstTestStepResult.willBeRetried) {\n          const uri = path.relative(this.cwd, testCaseAttempt.pickle.uri)\n          if (doesNotHaveValue(groupedTestCaseAttempts[uri])) {\n            groupedTestCaseAttempts[uri] = []\n          }\n          groupedTestCaseAttempts[uri].push(testCaseAttempt)\n        }\n      }\n    )\n    const features = _.map(groupedTestCaseAttempts, (group, uri) => {\n      const { gherkinDocument } = group[0]\n      const gherkinStepMap = getGherkinStepMap(gherkinDocument)\n      const gherkinScenarioMap = getGherkinScenarioMap(gherkinDocument)\n      const gherkinExampleRuleMap = getGherkinExampleRuleMap(gherkinDocument)\n      const gherkinScenarioLocationMap = getGherkinScenarioLocationMap(\n        gherkinDocument\n      )\n      const elements = group.map((testCaseAttempt: ITestCaseAttempt) => {\n        const { pickle } = testCaseAttempt\n        const pickleStepMap = getPickleStepMap(pickle)\n        let isBeforeHook = true\n        const steps = testCaseAttempt.testCase.testSteps.map((testStep) => {\n          isBeforeHook = isBeforeHook && testStep.pickleStepId === ''\n          return this.getStepData({\n            isBeforeHook,\n            gherkinStepMap,\n            pickleStepMap,\n            testStep,\n            testStepAttachments: testCaseAttempt.stepAttachments[testStep.id],\n            testStepResult: testCaseAttempt.stepResults[testStep.id],\n          })\n        })\n        return this.getScenarioData({\n          feature: gherkinDocument.feature,\n          gherkinScenarioLocationMap,\n          gherkinExampleRuleMap,\n          gherkinScenarioMap,\n          pickle,\n          steps,\n        })\n      })\n      return this.getFeatureData({\n        feature: gherkinDocument.feature,\n        elements,\n        uri,\n      })\n    })\n    this.log(JSON.stringify(features, null, 2))\n  }\n\n  getFeatureData({\n    feature,\n    elements,\n    uri,\n  }: IBuildJsonFeatureOptions): IJsonFeature {\n    return {\n      description: feature.description,\n      elements,\n      id: this.convertNameToId(feature),\n      line: feature.location.line,\n      keyword: feature.keyword,\n      name: feature.name,\n      tags: this.getFeatureTags(feature),\n      uri,\n    }\n  }\n\n  getScenarioData({\n    feature,\n    gherkinScenarioLocationMap,\n    gherkinExampleRuleMap,\n    gherkinScenarioMap,\n    pickle,\n    steps,\n  }: IBuildJsonScenarioOptions): IJsonScenario {\n    const description = getScenarioDescription({\n      pickle,\n      gherkinScenarioMap,\n    })\n    return {\n      description,\n      id: this.formatScenarioId({ feature, pickle, gherkinExampleRuleMap }),\n      keyword: gherkinScenarioMap[pickle.astNodeIds[0]].keyword,\n      line: gherkinScenarioLocationMap[pickle.astNodeIds[0]].line,\n      name: pickle.name,\n      steps,\n      tags: this.getScenarioTags({ feature, pickle, gherkinScenarioMap }),\n      type: 'scenario',\n    }\n  }\n\n  private formatScenarioId({\n    feature,\n    pickle,\n    gherkinExampleRuleMap,\n  }: {\n    feature: IFeature\n    pickle: IPickle\n    gherkinExampleRuleMap: Dictionary<IRule>\n  }): string {\n    let parts: any[]\n    const rule = gherkinExampleRuleMap[pickle.astNodeIds[0]]\n    if (doesHaveValue(rule)) {\n      parts = [feature, rule, pickle]\n    } else {\n      parts = [feature, pickle]\n    }\n    return parts.map((part) => this.convertNameToId(part)).join(';')\n  }\n\n  getStepData({\n    isBeforeHook,\n    gherkinStepMap,\n    pickleStepMap,\n    testStep,\n    testStepAttachments,\n    testStepResult,\n  }: IBuildJsonStepOptions): IJsonStep {\n    const data: IJsonStep = {}\n    if (testStep.pickleStepId !== '') {\n      const pickleStep = pickleStepMap[testStep.pickleStepId]\n      data.arguments = this.formatStepArgument(\n        pickleStep.argument,\n        gherkinStepMap[pickleStep.astNodeIds[0]]\n      )\n      data.keyword = getStepKeyword({ pickleStep, gherkinStepMap })\n      data.line = gherkinStepMap[pickleStep.astNodeIds[0]].location.line\n      data.name = pickleStep.text\n    } else {\n      data.keyword = isBeforeHook ? 'Before' : 'After'\n      data.hidden = true\n    }\n    if (testStep.stepDefinitionIds.length === 1) {\n      const stepDefinition = this.supportCodeLibrary.stepDefinitions.find(\n        (s) => s.id === testStep.stepDefinitionIds[0]\n      )\n      data.match = { location: formatLocation(stepDefinition) }\n    }\n    const { message, status } = testStepResult\n    data.result = { status: Status[status].toLowerCase() }\n    if (doesHaveValue(testStepResult.duration)) {\n      data.result.duration = durationToNanoseconds(testStepResult.duration)\n    }\n    if (status === Status.FAILED && doesHaveValue(message)) {\n      data.result.error_message = message\n    }\n    if (_.size(testStepAttachments) > 0) {\n      data.embeddings = testStepAttachments.map((attachment) => ({\n        data: attachment.body,\n        mime_type: attachment.mediaType,\n      }))\n    }\n    return data\n  }\n\n  getFeatureTags(feature: IFeature): IJsonTag[] {\n    return _.map(feature.tags, (tagData) => ({\n      name: tagData.name,\n      line: tagData.location.line,\n    }))\n  }\n\n  getScenarioTags({\n    feature,\n    pickle,\n    gherkinScenarioMap,\n  }: {\n    feature: IFeature\n    pickle: IPickle\n    gherkinScenarioMap: { [id: string]: IScenario }\n  }): IJsonTag[] {\n    return _.map(pickle.tags, (tagData) => {\n      const featureSource = feature.tags.find(\n        (t: ITag) => t.id === tagData.astNodeId\n      )\n      const scenarioSource = gherkinScenarioMap[pickle.astNodeIds[0]].tags.find(\n        (t: ITag) => t.id === tagData.astNodeId\n      )\n      const line = doesHaveValue(featureSource)\n        ? featureSource.location.line\n        : scenarioSource.location.line\n      return {\n        name: tagData.name,\n        line,\n      }\n    })\n  }\n}\n"]}