{"version":3,"file":"snippets_formatter.js","sourceRoot":"","sources":["../../src/formatter/snippets_formatter.ts"],"names":[],"mappings":";;;;;AAAA,0CAAiD;AACjD,uDAA8B;AAC9B,uCAAgD;AAChD,oDAAgD;AAIhD,MAAqB,iBAAkB,SAAQ,UAAS;IACtD,YAAY,OAA0B;QACpC,KAAK,CAAC,OAAO,CAAC,CAAA;QACd,OAAO,CAAC,gBAAgB,CAAC,EAAE,CAAC,UAAU,EAAE,CAAC,QAAmB,EAAE,EAAE;YAC9D,IAAI,6BAAa,CAAC,QAAQ,CAAC,eAAe,CAAC,EAAE;gBAC3C,IAAI,CAAC,WAAW,EAAE,CAAA;aACnB;QACH,CAAC,CAAC,CAAA;IACJ,CAAC;IAED,WAAW;QACT,MAAM,QAAQ,GAAa,EAAE,CAAA;QAC7B,IAAI,CAAC,kBAAkB,CAAC,mBAAmB,EAAE,CAAC,OAAO,CAAC,CAAC,eAAe,EAAE,EAAE;YACxE,MAAM,MAAM,GAAG,8BAAoB,CAAC;gBAClC,GAAG,EAAE,IAAI,CAAC,GAAG;gBACb,cAAc,EAAE,IAAI,CAAC,cAAc;gBACnC,kBAAkB,EAAE,IAAI,CAAC,kBAAkB;gBAC3C,eAAe;aAChB,CAAC,CAAA;YACF,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE;gBACpC,IAAI,QAAQ,CAAC,MAAM,CAAC,MAAM,KAAK,gBAAM,CAAC,SAAS,EAAE;oBAC/C,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAA;iBAChC;YACH,CAAC,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;QACF,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAA;IACjC,CAAC;CACF;AA3BD,oCA2BC","sourcesContent":["import Formatter, { IFormatterOptions } from './'\nimport Status from '../status'\nimport { parseTestCaseAttempt } from './helpers'\nimport { doesHaveValue } from '../value_checker'\nimport { messages } from '@cucumber/messages'\nimport IEnvelope = messages.IEnvelope\n\nexport default class SnippetsFormatter extends Formatter {\n  constructor(options: IFormatterOptions) {\n    super(options)\n    options.eventBroadcaster.on('envelope', (envelope: IEnvelope) => {\n      if (doesHaveValue(envelope.testRunFinished)) {\n        this.logSnippets()\n      }\n    })\n  }\n\n  logSnippets(): void {\n    const snippets: string[] = []\n    this.eventDataCollector.getTestCaseAttempts().forEach((testCaseAttempt) => {\n      const parsed = parseTestCaseAttempt({\n        cwd: this.cwd,\n        snippetBuilder: this.snippetBuilder,\n        supportCodeLibrary: this.supportCodeLibrary,\n        testCaseAttempt,\n      })\n      parsed.testSteps.forEach((testStep) => {\n        if (testStep.result.status === Status.UNDEFINED) {\n          snippets.push(testStep.snippet)\n        }\n      })\n    })\n    this.log(snippets.join('\\n\\n'))\n  }\n}\n"]}