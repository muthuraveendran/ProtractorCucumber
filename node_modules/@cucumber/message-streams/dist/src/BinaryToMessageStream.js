"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const stream_1 = require("stream");
const protobufjs_1 = require("protobufjs");
/**
 * Transforms a binary stream to a stream of message objects
 */
class BinaryToMessageStream extends stream_1.Transform {
    constructor(decodeDelimited) {
        super({ writableObjectMode: false, readableObjectMode: true });
        this.decodeDelimited = decodeDelimited;
        this.buffer = Buffer.alloc(0);
    }
    _transform(chunk, encoding, callback) {
        this.buffer = Buffer.concat([this.buffer, chunk]);
        let finished = false;
        do {
            try {
                const reader = protobufjs_1.Reader.create(this.buffer);
                const message = this.decodeDelimited(reader);
                this.push(message);
                this.buffer = this.buffer.slice(reader.pos);
                finished = true;
            }
            catch (err) {
                if (err instanceof RangeError) {
                    // The buffer doesn't have all the data yet. Keep reading.
                    break;
                }
                else {
                    throw err;
                }
            }
        } while (!finished);
        callback();
    }
}
exports.default = BinaryToMessageStream;
//# sourceMappingURL=BinaryToMessageStream.js.map