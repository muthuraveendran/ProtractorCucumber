"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const messages_1 = require("@cucumber/messages");
const src_1 = require("../src");
const assert_1 = __importDefault(require("assert"));
const NdjsonToMessageStream_1 = __importDefault(require("../src/NdjsonToMessageStream"));
const verifyStreamContract_1 = __importDefault(require("./verifyStreamContract"));
const toArray_1 = __importDefault(require("./toArray"));
describe('NdjsonStream', () => {
    const makeToMessageStream = () => new NdjsonToMessageStream_1.default(messages_1.messages.Envelope.fromObject.bind(messages_1.messages.Envelope));
    const makeFromMessageStream = () => new src_1.MessageToNdjsonStream();
    verifyStreamContract_1.default(makeFromMessageStream, makeToMessageStream);
    it('converts a buffer stream written byte by byte', (cb) => {
        const stream = makeToMessageStream();
        const envelope = messages_1.messages.Envelope.create({
            testStepFinished: messages_1.messages.TestStepFinished.create({
                testStepResult: messages_1.messages.TestStepFinished.TestStepResult.create({
                    status: messages_1.messages.TestStepFinished.TestStepResult.Status.UNKNOWN,
                }),
            }),
        });
        const json = JSON.stringify(envelope.toJSON());
        stream.on('error', cb);
        stream.on('data', (receivedEnvelope) => {
            assert_1.default.deepStrictEqual(envelope, receivedEnvelope);
            cb();
        });
        const buffer = Buffer.from(json);
        for (let i = 0; i < buffer.length; i++) {
            stream.write(buffer.slice(i, i + 1));
        }
        stream.end();
    });
    it('converts messages to JSON with enums as strings', (cb) => {
        const stream = new src_1.MessageToNdjsonStream();
        stream.on('data', (json) => {
            const ob = JSON.parse(json);
            assert_1.default.deepStrictEqual(ob, {
                testStepFinished: {
                    testStepResult: {
                        status: 'UNKNOWN',
                    },
                },
            });
            cb();
        });
        stream.write(messages_1.messages.Envelope.create({
            testStepFinished: messages_1.messages.TestStepFinished.create({
                testStepResult: messages_1.messages.TestStepFinished.TestStepResult.create({
                    status: messages_1.messages.TestStepFinished.TestStepResult.Status.UNKNOWN,
                }),
            }),
        }));
    });
    it('converts messages to JSON with undefined arrays omitted', (cb) => {
        const stream = new src_1.MessageToNdjsonStream();
        stream.on('data', (json) => {
            const ob = JSON.parse(json);
            assert_1.default.deepStrictEqual(ob, { testCase: { pickleId: '123' } });
            cb();
        });
        stream.write(messages_1.messages.Envelope.create({
            testCase: messages_1.messages.TestCase.create({
                pickleId: '123',
            }),
        }));
    });
    it('converts messages to JSON with undefined strings omitted', (cb) => {
        const stream = new src_1.MessageToNdjsonStream();
        stream.on('data', (json) => {
            const ob = JSON.parse(json);
            assert_1.default.deepStrictEqual(ob, { testCase: {} });
            cb();
        });
        stream.write(messages_1.messages.Envelope.create({
            testCase: messages_1.messages.TestCase.create({ pickleId: '' }),
        }));
    });
    it('converts messages to JSON with undefined numbers omitted', (cb) => {
        const stream = new src_1.MessageToNdjsonStream();
        stream.on('data', (json) => {
            const ob = JSON.parse(json);
            assert_1.default.deepStrictEqual(ob, {
                gherkinDocument: {
                    feature: {
                        location: {
                            column: 1,
                        },
                    },
                },
            });
            cb();
        });
        stream.write(messages_1.messages.Envelope.create({
            gherkinDocument: messages_1.messages.GherkinDocument.create({
                feature: messages_1.messages.GherkinDocument.Feature.create({
                    location: messages_1.messages.Location.create({
                        column: 1,
                    }),
                }),
            }),
        }));
    });
    it('ignores missing fields', () => __awaiter(void 0, void 0, void 0, function* () {
        const toMessageStream = makeToMessageStream();
        toMessageStream.write('{"unused": 999}\n');
        toMessageStream.end();
        const incomingMessages = yield toArray_1.default(toMessageStream);
        assert_1.default.deepStrictEqual(incomingMessages, [messages_1.messages.Envelope.create({})]);
    }));
    it('ignores empty lines', () => __awaiter(void 0, void 0, void 0, function* () {
        const toMessageStream = makeToMessageStream();
        toMessageStream.write('{}\n{}\n\n{}\n');
        toMessageStream.end();
        const incomingMessages = yield toArray_1.default(toMessageStream);
        assert_1.default.deepStrictEqual(incomingMessages, [
            messages_1.messages.Envelope.create({}),
            messages_1.messages.Envelope.create({}),
            messages_1.messages.Envelope.create({}),
        ]);
    }));
    it('includes offending line in error message', () => __awaiter(void 0, void 0, void 0, function* () {
        const toMessageStream = makeToMessageStream();
        yield assert_1.default.rejects(() => __awaiter(void 0, void 0, void 0, function* () {
            toMessageStream.write('{}\nBLA BLA\n\n{}\n');
            toMessageStream.end();
            yield toArray_1.default(toMessageStream);
        }), {
            message: 'Not JSON: BLA BLA',
        });
    }));
});
//# sourceMappingURL=NdjsonStreamTest.js.map