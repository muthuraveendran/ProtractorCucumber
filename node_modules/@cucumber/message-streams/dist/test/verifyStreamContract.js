"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const messages_1 = require("@cucumber/messages");
const toArray_1 = __importDefault(require("./toArray"));
const assert = require("assert");
function verifyStreamContract(makeFromMessageStream, makeToMessageStream) {
    describe('contract', () => {
        it('can be serialised over a stream', () => __awaiter(this, void 0, void 0, function* () {
            const fromMessageStream = makeFromMessageStream();
            const toMessageStream = makeToMessageStream();
            fromMessageStream.pipe(toMessageStream);
            const outgoingMessages = [
                messages_1.messages.Envelope.create({
                    source: messages_1.messages.Source.create({ data: 'Feature: Hello' }),
                }),
                messages_1.messages.Envelope.create({
                    attachment: messages_1.messages.Attachment.create({
                        body: 'hello',
                    }),
                }),
            ];
            for (const outgoingMessage of outgoingMessages) {
                fromMessageStream.write(outgoingMessage);
            }
            fromMessageStream.end();
            const incomingMessages = yield toArray_1.default(toMessageStream);
            assert.deepStrictEqual(incomingMessages, outgoingMessages);
        }));
    });
}
exports.default = verifyStreamContract;
//# sourceMappingURL=verifyStreamContract.js.map